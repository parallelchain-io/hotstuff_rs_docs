searchState.loadedDescShard("hotstuff_rs", 0, "A Rust Programming Language library for Byzantine Fault …\nThread that drives the event-driven implementations of the …\nPluggable, replicable applications.\nSubprotocol that “catches-up” the local block tree in …\nThe persistent state of a replica.\nThread that receives events emitted by the algorithm and …\nSubscribable events that are published when significant …\nSubprotocol for committing <code>Block</code>s.\nFunctions that log out events.\nPluggable peer-to-peer (P2P) networking.\nSubprotocol for Byzantine view synchronization and leader …\nMethods for building and running a replica as well as …\nTypes and traits that are used across multiple …\nInstance of the algorithm thread.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an instance of the algorithm thread.\nStart an instance of the algorithm thread.\nTrait implemented by applications that are to be …\nIndicates either that <code>ValidateBlockRequest::proposed_block</code> …\nRequest for an <code>App</code> to produce a new block extending a …\nResponse from an <code>App</code> to a <code>ProduceBlockRequest</code>.\nIndicates that <code>ValidateBlockRequest::proposed_block</code> is …\nRequest for the app to validate a proposed block. Contains …\nResponse from an <code>App</code> upon receiving a <code>ValidateBlockRequest</code>.\nThe <code>AppStateUpdates</code> that the produced block will cause …\nGet a current view of the block tree that this …\nGet a current view of the block tree that this …\nGet the current view of the replica.\nThe <code>data</code> field of the produced block.\nThe <code>data_hash</code> field of the produced block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ProduceBlockRequest</code>.\nCreate a new <code>ValidateBlockRequest</code>.\nGet the parent block of the block that this <code>produce_block</code> …\nCalled by HotStuff-rs when the replica becomes a leader …\nGet the block that this <code>validate_block</code> call should …\nCalled by HotStuff-rs when the replica receives a <code>Proposal</code> …\nCalled when the replica is syncing and receives a …\nThe <code>ValidatorSetUpdates</code> that the produced block will cause …\nThe <code>AppStateUpdates</code> that the proposed block will cause …\nThe <code>ValidatorSetUpdates</code> that the proposed block will cause …\nImplements the <code>BlockSyncClient</code>, which helps a replica …\nDefinitions for structured messages that are sent between …\nImplements the <code>BlockSyncServer</code> for the block sync …\nConfiguration parameters that define the behaviour of the …\nThe block sync client may fail if there is an error when …\nReplicas that are currently available to be sync servers,\nA list of replicas (identified by their public addresses) …\nCheck if a given server address is in the blacklist.\nTime after which a blacklisted sync server should be …\nBlacklist a given sync server by:\nBy how many views a PC received via <code>AdvertisePC</code> must be …\nHow much time needs to pass without any progress (i.e., …\nChain ID of the target blockchain. The block sync client …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCached value of <code>block_tree.highest_pc().view</code>.\nInitialize the internal state of the block sync client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether a given verifying key is recognised as a …\nThe most recent instant in time when either:\nCreate a new instance of the BlockSyncClient.\nProcess an <code>AdvertiseBlock</code> message. This can lead to …\nProcess an <code>AdvertisePC</code> message. This can lead to …\nProcess a received <code>BlockSyncAdvertiseMessage</code>.\nSelect a random sync server from available sync servers, …\nRemove all sync servers whose blacklisting has expired …\nThe maximum number of blocks requested with every block …\nTimeout for waiting for a single block sync response.\nSync with a randomly selected peer.\nSync with a given peer. This involves possibly multiple …\nUpdate the <code>BlockSyncClient</code>’s internal state, and …\nA message periodically broadcasted by the sync server to:\nA message periodically broadcasted by the sync server to …\nMessages periodically broadcasted by the sync server to …\nMessages exchanged between a sync server and a sync client …\nSync request sent by a sync client to a sync server. The …\nSync response sent by a sync server to a sync client …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParameters that are used to configure the behaviour of the …\nHow often the sync server should broadcast …\nID of the blockchain for which the server handles sync …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeypair used to sign Advertise Block messages.\nMaximum number of blocks that this server can provide in a …\nTypes for reading from and writing to the block tree.\nRules and predicates that help with maintaining the …\nTraits for pluggable Block Tree persistence.\nByte-prefixes that specify where each Block Tree variable …\nSpecial, read-only interface for querying the Block Tree …\nInternal read-and-write handle used by the algorithm …\nGeneral purpose, read-only interface for querying the …\nView of the block tree made available to method calls on …\nGet the value associated with <code>key</code> in the current app state.\nGet <code>block</code>, if it is currently in the block tree.\nGet the committed block at <code>height</code>, if it is currently in …\nGet the whole of <code>block.data</code>, if <code>block</code> is currently in the …\nGet <code>block.data_hash</code>, if <code>block</code> is currently in the block …\nGet <code>block.data.len()</code>, if <code>block</code> is currently in the block …\nGet one <code>block.data[datum_index]</code>, if <code>block</code> is currently in …\nGet the height of <code>block</code>, if <code>block</code> is currently in the …\nGet <code>block.justify</code>, if <code>block</code> is currently in the block tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the current committed validator set.\nUnable to find a block with the specific <code>CryptoHash</code>, even …\nErrors that may be encountered when reading or writing to …\nRead and write handle into the block tree that should be …\nError when trying to get a value from the block tree’s …\nError when writing a key-value pair to the write batch. …\nError when trying set a value into block tree’s …\nCreate an <code>AppBlockTreeView</code> which sees the app state as it …\nPerform depth-first search to collect the hashes of all …\nCommit <code>block</code> and all of its ancestors, if they have not …\nCheck whether <code>block</code> exists on the block tree.\nDeletes all data of blocks in a branch starting from (and …\nDelete the “siblings” of the specified block, along …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the height of the highest committed block.\nGet the maximum of:\nInitialize the block tree variables listed in initial state…\nInsert into the block tree a <code>block</code> that will cause the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>BlockTreeSingleton</code> on top of …\nCreate a new instance of <code>BlockTreeSingleton</code> on top of …\nPublish all events resulting from calling <code>update</code>. These …\nSet the highest <code>TimeoutCertificate</code> to be <code>tc</code>.\nSet the highest view entered to be <code>view</code>.\nSet the highest view phase-voted to be <code>view</code>.\nCreate a <code>BlockTreeSnapshot</code>.\nUpdate the block tree upon seeing a safe <code>justify</code> in a <code>Nudge</code>\nAtomically write the changes in <code>write_batch</code> into the …\nA factory for <code>BlockTreeSnapshot</code>s.\nA read-only view into the block tree that is guaranteed to …\nGet a chain of blocks starting from the specified tail …\nGet a chain of blocks from the newest block up to (but not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>Block</code> in <code>block_tree</code> (if any) that, along with all …\nCheck whether <code>pc</code> belongs to the branch that extends from …\nGet the PC (if any) that should be set as the Locked PC …\nGet the <code>Block</code> in the <code>block_tree</code> which a leader of the …\nCheck whether <code>block</code> can safely cause updates to <code>block_tree</code>…\nCheck whether <code>nudge</code> can safely cause updates to <code>block_tree</code>…\nCheck whether <code>pc</code> can safely cause updates to <code>block_tree</code>, …\nError when trying to read a value corresponding to a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConcatenate two byteslices into one vector.\nStores the <code>HandlerPair</code> of user-defined and optional …\nStores the two optional handlers enabled for an event type …\nPointer to a handler closure, parametrised by the argument …\nTriggers the execution of each of the two handlers - the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if no handlers are defined, i.e., neither …\nCreates a new <code>HandlerPair</code> with the user-defined handler, …\nCreates the handler pairs for all pre-defined event types …\nStarts the event bus thread, which runs an infinite loop …\nThe replica broadcasted an advance view message to all …\nThe replica collected a new <code>phase_certificate</code> from the …\nThe replica collected a new <code>timeout_certificate</code> from the …\nA <code>block</code> was committed. This involves persistent changes to …\nThe replica exited sync mode, during which it tried to …\nEnumerates all events defined for HotStuff-rs.\nA new <code>block</code> was inserted into the Block Tree in a …\nThe replica sent a new view message for its current view …\nThe replica nudged for a block by broadcasting a nudge for …\nThe replica voted for a phase of a block by sending …\nThe replica proposed a block by broadcasting it as a …\nA <code>block</code> was “pruned” (i.e., the block’s siblings …\nThe replica received an <code>advance_view</code> message from another …\nThe replica received a new view message for the current …\nThe replica received a <code>nudge</code> for the replica’s current …\nThe replica received a <code>phase_vote</code> for the replica’s …\nThe replica received a <code>proposal</code> for the replica’s …\nThe replica’s sync server received a sync request from a …\nThe replica received a <code>timeout_certificate</code> for the replica…\nThe replica’s sync server sent a sync response to a peer …\nThe replica entered sync mode and tried to sync with a …\nThe replica started a new view with a given <code>ViewNumber</code>.\nThe replica broadcasted a timeout vote message to all …\nThe “Highest <code>PhaseCertificate</code>” stored in the block …\nThe “Highest <code>TimeoutCertificate</code>” stored in the block …\nThe “Locked <code>PhaseCertificate</code>” stored in the block tree …\nThe “Committed Validator Set” stored in the block …\nThe replica’s view, with a given <code>ViewNumber</code>, timed out.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublishes a given instance of the <code>Event</code> enum on the event …\nEvent-driven implementation of the HotStuff subprotocol, …\nMessages sent between replicas as part of the HotStuff …\nFunctions that determine what roles a replica should play …\nSpecification of the sequence flow of the event-driven …\nTypes specific to the HotStuff subprotocol.\nAll leaders for the view have proposed or nudged, hence no …\nA single participant in the HotStuff subprotocol.\nConfiguration parameters for the <code>HotStuff</code> struct.\nThe different ways a call to a method of the <code>HotStuff</code> …\nThe leader with a given public key has already proposed or …\nKeeps track of the set of <code>Proposal</code>s that have been …\nNo proposal or nudge was seen in this view so far. …\nThe Chain ID of the blockchain that the current replica is …\nOn receiving a new <code>ViewInfo</code> from the <code>Pacemaker</code>, send …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHas this leader already proposed/nudged in the current …\nHave all (max. 2) leaders already proposed/nudged in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the HotStuff internal view is outdated with …\nThe keypair with which the HotStuff implementation should …\nCreate a new HotStuff subprotocol participant.\nProcess a newly received message for the current view …\nProcess the received NewView.\nProcess the received nudge.\nProcess a received <code>phase_vote</code>.\nProcess a newly received <code>proposal</code>.\nEvery kind of message sent between replicas as part of the …\nMessage sent by a replica to the leaders of the next view …\nSee <code>NewView</code>.\nMessage broadcasted by a leader in <code>view</code> to “nudge” …\nSee <code>Nudge</code>.\nMessage sent by a validator to a leader of <code>view + 1</code> to …\nSee <code>PhaseVote</code>.\nMessage broadcasted by a leader in <code>view</code> to propose to …\nSee <code>Proposal</code>.\nA <code>Block</code> extending the chain identified by <code>chain_id</code>.\n<code>block</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with this …\nGet the <code>ChainID</code> associated with the <code>HotStuffMessage</code>.\n<code>ChainID</code> of the block tree that this <code>Proposal</code> should extend.\n<code>ChainID</code> of the block tree that <code>justify.block</code> is part of.\n<code>chain_id</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with …\n<code>ChainID</code> of the block tree that <code>highest_pc.block</code> is part of.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe sending replica’s <code>highest_pc</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>PhaseVote</code>s for this <code>Nudge</code> should be for the <code>Phase</code> …\nCreate a new <code>Nudge</code> message containing the given <code>chain_id</code>, …\nCreate a <code>PhaseVote</code> for the given <code>chain_id</code>, <code>view</code>, <code>block</code>, …\n<code>phase</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with this …\nDigital signature formed using\nReturns the number of bytes required to store a given …\nGet the view number associated with a given <code>HotStuffMessage</code>…\nCurrent <code>ViewNumber</code> of the proposer that created this …\nCurrent <code>ViewNumber</code> of the proposer that created this <code>Nudge</code>.\n<code>view</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with this …\nThe <code>view</code> that the replica sending this <code>NewView</code> is exiting.\nDetermine whether or not <code>replica</code> should phase-vote for the …\nDetermine whether <code>validator</code> should act as a proposer in …\nDetermine whether the <code>replica</code> is an “active” …\nIdentify the leader(s) that <code>new_view</code> should be sent to, …\nIdentify the leader that <code>phase_vote</code> should be sent to, …\nCommit phase. The <strong>third</strong> voting phase in the phased mode.\nDecide phase. The <strong>fourth</strong> and final voting phase in the …\nGeneric phase. The only voting phase in the pipelined mode.\nHotStuff subprotocol voting phases.\nCryptographic proof that at least a quorum of validators …\nStruct that incrementally forms <code>PhaseCertificate</code>s by …\nPrecommit phase. The <strong>second</strong> voting phase in the phased …\nPrepare phase. The <strong>first</strong> voting phase in the phased mode.\nCollect <code>phase_vote</code> using this collector. Return a Phase …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the “Genesis Phase Certificate”, the phase …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether <code>self.phase</code> is a variant that is allowed for …\nDetermine the appropriate validator set that the PC should …\nCheck if all of the signatures in the certificate are …\nCheck whether this <code>PhaseCertificate</code> is the <code>genesis_pc</code>.\nCheck whether <code>self.phase</code> is a veriant that is allowed for …\nFor each key-value pair in this HashMap:\nImplemented by event types. Used to get a closure that …\nReturns a pointer to the default logging handler for a …\nExhaustive enumerations around every message variant used …\nTrait for pluggable peer-to-peer (P2P) networking.\nFunctions and types for receiving messages from the P2P …\nFunctions and types for sending messages to the P2P …\nSee <code>BlockSyncAdvertiseMessage</code>,\nSee: <code>BlockSyncMessage</code>.\nSee <code>HotStuffMessage</code>.\nAll message variants used in HotStuff-rs.\nSee <code>PacemakerMessage</code>.\nMessage variants sent or received by the <code>algorithm</code> thread.\nSee: <code>ProgressMessage</code>.\nGet the <code>chain_id</code> field of the inner message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the inner message is a …\nGet the size of the inner message.\nGet the <code>view</code> field of the inner message.\nTrait for pluggable peer-to-peer (P2P) networking.\nHandle for informing the <code>Network</code> implementation about …\nSend a message to all peers (including listeners) without …\nReturns the argument unchanged.\nInform the network provider the validator set on wake-up.\nCalls <code>U::from(self)</code>.\nCreate a new update handle.\nReceive a message from any peer. Returns immediately with …\nSend a message to the specified peer without blocking.\nInform the networking provider of updates to the validator …\nInform the network provider of new validator set <code>updates</code> …\nA receiving end for sync responses. The …\nA receiving end for sync requests. The …\nA cacheable message can be inserted into the progress …\nMessage buffer intended for storing received …\nA receiving end for <code>ProgressMessage</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf there are messages for this view in the buffer, remove …\nTry inserting the message into the buffer. In case caching …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a fresh ProgressMessageStub with a given receiver …\nCreate an empty message buffer.\nReceive a message matching the specified <code>chain_id</code>, and …\nReceive a BlockSyncRequest if available, else return …\nReceive a BlockSyncResponse from a given peer. Waits for …\nRemove all messages for views less than the current view.\nGiven the number of bytes that need to be removed, removes …\nSpawn the poller thread, which polls the <code>Network</code> for …\nHandle for sending and broadcasting messages to the <code>Network</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent-driven implementation of the Pacemaker subprotocol.\nMessages sent between replicas as part of the Pacemaker …\nTypes specific to the Pacemaker protocol.\nSee: <code>BlockTreeError</code>\nEnumerates the different ways a <code>Pacemaker::extend_view</code> …\nSee: <code>ExtendViewError</code>.\nThe timeout for a requested view cannot be found in the …\nSame as <code>UpdateViewError::GetViewTimeoutError</code>.\nAn attempt was made to update the current view to a lower …\nA single participant in the Pacemaker subprotocol.\nConfiguration variables for the <code>Pacemaker</code> struct.\nEnumerates the different ways a call to any of <code>Pacemaker</code>’…\nIn-memory state of a <code>Pacemaker</code>.\nAn attempt was made to extend a view that is not an …\nEnumerates the different ways a <code>Pacemaker::update_view</code> …\nSee: <code>UpdateViewError</code>.\nDescribes a view (most often the current view), in terms …\nThe Chain ID of the blockchain that the current replica is …\nCompute the current epoch based on the current <code>view</code> and …\nHow many views are in an epoch.\nExtend the timeout of the <code>epoch_change_view</code> by another …\nExtend the timeout of the current view, which must be an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes a <code>PacemakerState</code> upon starting the Pacemaker …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether <code>view</code> is an epoch-change view given the …\nThe keypair with which the Pacemaker implementation should …\nThe view in which this replica last broadcasted an …\nHow much time can elapse in a view before it times out.\nCreate a new <code>Pacemaker</code> instance..\nCreate a new <code>ViewInfo</code> instance containing the provided …\nExecute the required steps in the Pacemaker protocol upon …\nExecute the required steps in the Pacemaker subprotocol …\nExecute the required steps in the Pacemaker subprotocol …\nQuery the Pacemaker for its current <code>ViewInfo</code>.\nDeterministically select a replica in <code>validator_set</code> to …\nCause the Pacemaker to check the current time (“clock …\n<code>TimeoutVoteCollector</code>s for the at-most two validator sets …\nMapping between current and future view numbers and the …\nUpdate the <code>PacemakerState</code>’s timeouts upon entering the …\nUpdate the Pacemaker’s state in order to enter a …\nReturn a given ViewInfo with updated timeout.\nThe current view.\nThe lower view that the caller tried to change the current …\nMessage containing cryptographic proof that a replica can …\nSee <code>AdvanceView</code>.\nEnum wrapper around any kind of message sent between …\nEnum wrapper around every kind of <code>Certificate</code> that can …\nVote in favor of leaving a specified Epoch-Change <code>view</code> and …\nSee <code>TimeoutVote</code>.\nCreate a <code>PacemakerMessage::AdvanceView</code> which that to get …\nGet the <code>ChainID</code> in the inner message.\n<code>ChainID</code> of the block tree that the replica’s validator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe current highest timeout certificate of the sending …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSignature over <code>chain_id</code> and <code>view</code> made using the sending …\nGet the size (in bytes) of the in-memory representation of …\nCreate a <code>PacemakerMessage::TimeoutVote</code> that indicates that …\nGet the <code>ViewNumber</code> in the inner message.\nThe view that this timeout vote seeks to terminate.\nCryptographic proof that at least a quorum of validators …\nStruct that incrementally forms <code>TimeoutCertificate</code>s by …\nChain ID of the blockchain that the validators that …\nAdds the timeout vote to a signature set if it has the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the signatures in the TC are correct and form a …\nChecks if all of the signatures in the certificate are …\nSignatures of the <code>TimeoutVote</code>s that were collected to …\nView Number of the view that timed out.\nStores the user-defined parameters required to start the …\nA handle to the background threads of a HotStuff-rs …\nStores all necessary parameters and trait implementations …\nGet a <code>BlockTreeCamera</code>.\nCreate a builder for building a Configuration. On the …\nCreate a builder for building a ReplicaSpec. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the replica’s block tree with the intial app …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStarts all threads and channels associated with running a …\n<code>Block</code> type and its methods.\nCryptographic primitives.\nTypes that exist only to store bytes, and do not have any …\nSigned messages, votes, and certificates.\nTypes that store updates to the App-mutable states.\nTypes that store information about validator sets or …\nCryptographically hashed, <code>justify</code>-linked payload that …\n<code>App</code>-provided cryptographic hash over <code>data</code>.\nReturns the argument unchanged.\nLibrary-computed cryptographic hash over …\nCalls <code>U::from(self)</code>.\nChecks if hash and justify are cryptographically correct.\n<code>PhaseCertificate</code> linking this block with its parent block.\nCreate a new block with the specified <code>height</code>, <code>justify</code>, …\nSHA-256 hasher.\nConvenience wrapper trait covering functionality of …\nA facade around <code>SigningKey</code> that implements method for <code>sign</code>…\nEd25519 signature.\nErrors which may occur while processing signatures and …\nSign the provided message bytestring using <code>Self</code> (e.g. a …\ned25519 signing key which can be used to produce …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nAn ed25519 public key.\nProcess input data in a chained manner.\nCompute hash of <code>data</code>.\nRetrieve result and consume hasher instance.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new hasher instance.\nCreate a <code>Keypair</code> that wraps over <code>signing_key</code>.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet the <code>VerifyingKey</code> of this <code>Keypair</code>.\nReset hasher instance to its initial state.\nSign the given message and return a digital signature\nSign an arbitrary <code>message</code> with the <code>Keypair</code>.\nAttempt to sign the given message, returning a digital …\nProcess data, updating the internal state.\nUse <code>Self</code> to verify that the provided signature for a given …\nHeight of a block in the block tree.\nSize of a buffer (in bytes).\nNumber that uniquely identifies a blockchain.\nList of children of a particular block.\n32-byte cryptographic hash.\nArbitrary, indexable data provided by an <code>App</code> to …\nNumber of <code>Datum</code> stored in a block’s <code>Data</code>.\nUnit of <code>Data</code> that can be queried individually from the …\nConfigurable number of views in a Pacemaker epoch.\nWeight of a specific validator’s votes in consensus …\nEd25519 digital signature.\nAn ordered list of <code>SignatureBytes</code> from the same …\nSum of the <code>Power</code>s of all validators in a <code>ValidatorSet</code>.\nView number. Starts at 0 and increases by 1 every time the …\nGet the inner <code>[u8; 32]</code> value of this <code>CryptoHash</code>.\nGet the inner <code>[u8; 64]</code> value of this <code>CryptoHash</code>.\nGet a reference to the inner <code>Vec&lt;u8&gt;</code> of this <code>Datum</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate the <code>SignatureSet</code> that forms a part of the <code>genesis_pc</code>…\nGet a reference to the <code>Option&lt;SignatureBytes&gt;</code> at position …\nGet the initial <code>ViewNumber</code>, which is 0.\nGet the <code>u64</code> value of this <code>ChainID</code>.\nGet the inner <code>u64</code> value of this <code>BlockHeight</code>.\nGet the inner <code>u32</code> of this <code>DataLen</code>.\nGet the inner <code>u64</code> value of this <code>Power</code>.\nGet the inner <code>u128</code> value of this <code>TotalPower</code>.\nGet the inner <code>u64</code> of this <code>ViewNumber</code>.\nGet the inner <code>u32</code> value of this <code>EpochLength</code>.\nGet the inner <code>u64</code> value of this <code>BufferSize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through the hashes of the blocks in this …\nIterate through the <code>Datum</code>s that are in this <code>Data</code> in the …\nGet an iterator over the <code>Option&lt;SignatureBytes&gt;</code>s in this …\nGet how many <code>Datum</code>s are in this <code>Data</code>.\nGet the length of the inner <code>Vec&lt;Option&lt;SignatureBytes&gt;&gt;</code> of …\nCreate a new <code>ChainID</code> with an <code>int</code> value.\nCreate a new <code>BlockHeight</code> with an <code>int</code> inner value.\nCreate a new <code>ChildrenList</code> wrapping around <code>blocks</code>.\nCreate a new <code>CryptoHash</code> wrapping <code>bytes</code>.\nCreate a new <code>SignatureBytes</code> wrapping <code>bytes</code>.\nCreate a new <code>Data</code> wrapping <code>datum_vec</code>.\nCreate a new <code>DataLen</code> wrapping <code>len</code>.\nCreate a new <code>Datum</code> wrapping <code>bytes</code>.\nCreate a new <code>Power</code> wrapping <code>int</code>.\nCreate a new <code>TotalPower</code> wrapping <code>int</code>.\nCreate a new <code>SignatureSet</code> initially containing <code>len</code> <code>None</code>s.\nCreate a new <code>ViewNumber</code> wrapping <code>int</code>.\nCreate a new <code>EpochLength</code> wrapping <code>int</code>.\nCreate a new <code>BufferSize</code> wrapping <code>int</code>.\nAdd <code>hash</code> to this <code>ChildrenList</code>.\nSet the value at <code>pos</code> in this <code>SignatureSet</code> to be <code>signature</code>.\nGet the little-endian representation of the inner <code>u64</code> …\nGet a reference to the inner <code>Vec&lt;CryptoHash&gt;</code> value of this …\nGet a reference to the inner <code>Vec&lt;Datum&gt;</code> of this <code>Data</code>.\nGet a reference to the inner <code>Vec&lt;Option&lt;SignatureBytes&gt;&gt;</code> …\nStruct that combines <code>Collector</code>s for the validator set(s) …\nData types that aggregate multiple <code>Vote</code>s of the same type …\nThe specific <code>Certificate</code> type that this <code>Collector</code> returns …\nTypes that progressively combine <code>Vote</code>s with the same …\nData types that contain: 1. A message, and 2. A digital …\nData types that indicate that a validator supports a …\nThe specific <code>Vote</code> type that this <code>Certificate</code> aggregates …\nThe specific <code>SignedMessage</code> type that this <code>Collector</code> takes …\nGet the <code>chain_id</code> of the chain that the <code>Vote</code> is about.\nGet the <code>ChainID</code> of the chain that this <code>Collector</code> is …\nCollect a <code>vote</code> signed by <code>signer</code>, returning a <code>Certificate</code> …\nCollect <code>message</code> with both collectors in this …\n<code>Collector</code> collecting votes from the current Committed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck whether the certificate is “correct” ( i.e., …\nVerify that <code>signature_bytes</code> is a signature created by …\nCheck whether the certificate is correctly signed by a …\nGet the bytes that are passed as input into the signing …\nCreate a new instance of the <code>Collector</code>, configuring it to …\nCreate an <code>ActiveCollectorPair</code> for <code>chain_id</code>, <code>view</code>, and …\n<code>Collector</code> collecting votes from the current Previous …\nCompute the minimum voting power that a certificate …\nGet the signature of the <code>SignedMessage</code>.\nUpdate the <code>ActiveCollectorPair</code>’s active validator sets …\nGet the <code>ValidatorSet</code> that this <code>Collector</code> is currently …\nGet the <code>view</code> that the <code>Vote</code> is about.\nGet the <code>View</code> that this <code>Collector</code> is currently configured …\nSet of key-value updates committed to the App State when a …\nGeneric set of key-value updates that are committed when a …\nSet of updates to the validator that are applied when a …\nIntermediate representation of ValidatorSetUpdates for …\nInternal type used for serializing and deserializing …\nCheck whether the <code>UpdateSet</code> is scheduled to delete <code>key</code> …\nSchedule the deletion of <code>key</code> when the block that …\nGet an iterator over all of the keys that this <code>UpdateSet</code> …\nDeletion updates that will be committed when a <code>Block</code> is …\nDeletion updates that will be committed when a <code>Block</code> is …\nDeletion updates that will be committed when a <code>Block</code> is …\nDeletion updates that will be committed when a <code>Block</code> is …\nReturns the argument unchanged.\nGet whether the <code>UpdateSet</code> is scheduled to insert a value …\nSchedule the insertion of a <code>key</code>-<code>value</code> pair when the block …\nGet an iterator over all of the key-value pairs that this …\nInsertion updates that will be committed when a <code>Block</code> is …\nInsertion updates that will be committed when a <code>Block</code> is …\nInsertion updates that will be committed when a <code>Block</code> is …\nInsertion updates that will be committed when a <code>Block</code> is …\nCalls <code>U::from(self)</code>.\nCreate a new <code>UpdateSet</code> with empty <code>inserts</code> and <code>deletes</code>.\nSize of an encoded Ed25519 signature in bytes.\nThe block’s validator set updates have been applied to …\nThe block does not update the validator set.\nThe block’s validator set updates have not been applied …\nEd25519 signature.\ned25519 signing key which can be used to produce …\nStores the identities of validators and their voting …\nIntermediate representation of <code>ValidatorSet</code> for safe …\nCollection of basic information about the current (i.e., …\nWraps around <code>ValidatorSetUpdates</code>, providing additional …\nIntermediate representation of <code>ValidatorSetUpdatesStatus</code> …\nAn ed25519 public key.\nApply validator set <code>updates</code> to the validator set. This …\nConvert this <code>SigningKey</code> into a <code>SecretKey</code> reference\nView this public key as a byte array.\nGet the committed validator set.\nCheck whether the validator set contains <code>validator</code>.\nCheck whether the updates status is <code>Pending</code> or <code>Committed</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerive this public key from its corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nConstruct a <code>SigningKey</code> from a <code>SecretKey</code>\nConstruct a <code>VerifyingKey</code> from a slice of bytes.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nConstruct a <code>SigningKey</code> from the bytes of a <code>VerifyingKey</code> …\nParse an Ed25519 signature from a byte slice.\nGenerate an ed25519 signing key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the validator set is empty (i.e., …\nCheck whether the updates status is <code>Pending</code>.\nReturns whether this is a <em>weak</em> public key, i.e., if this …\nGet the number of validators currently in the validator …\nCreate an empty validator set.\nCreate a new <code>ValidatorSetState</code>.\nGet the index of the given <code>validator</code> in the sorted order of\nGet the power of the specified <code>validator</code> inside the …\nGet the previous validator set.\nPut a <code>validator</code> with the specified <code>power</code> into the …\nCompute the total power that a certificate must match or …\nBytes for the <code>R</code> component of a signature.\nRemove <code>validator</code> from the validator set, if it actually is …\nBytes for the <code>s</code> component of a signature.\nReturn the inner byte array.\nConvert this <code>SigningKey</code> into a <code>SecretKey</code>\nConvert this public key to a byte array.\nConvert this signing key to a 64-byte keypair.\nConvert this verifying key into Montgomery form.\nConvert this signing key into a Curve25519 scalar. This is …\nConvert this signing key into a byte representation of an …\nConvert this signature into a byte vector.\nGet the sum of the powers of all of the validators inside …\nSign a message with this signing key’s secret key.\nGet whether or not the latest validator set update (the …\nGet the height of the block that caused the most recently …\nGet an iterator through validators’ verifying keys which …\nGet a vector containing each validator and its power, in …\nVerify a signature on a message with this signing key’s …\nVerify a signature on a message with this signing key’s …\nVerify a signature on a message with this keypair’s …\nStrictly verify a signature on a message with this signing …\nStrictly verify a signature on a message with this keypair…\nGet the <code>VerifyingKey</code> for this <code>SigningKey</code>.")