var searchIndex = new Map(JSON.parse('[\
["hotstuff_rs",{"doc":"A Rust Programming Language library for Byzantine Fault …","t":"CCCCCCCCCCCCFOOONNONNONNOOONNNNNKPFFPFGONNOONNNNNNNNNOOONNNNNNNNNNNOMNONNNNNNNNNNNNMMONNNNOOCCCFFGFPOONONOOONNNNNNNNOOONNNNNNONNNNNHONNNNNONNOOONNNNNNNNNNNNNNNONNNNFPFPGGFPFPNNNNONNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNONNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFOONNNNOOONNNNOONOOOONNNNNNNNNFFIONNNNOOOONNNONNNNONNOOOOOOOOOOOOOHOOONNNNNNOOOOOONNPFPFPFPFPFGPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCCCPPFFGPGPNNNNNNNNONNONONNNNNNNNNNNNNONNNNNNOOONNNNNNNNNNNNNOONNNNOGFPFPFPFPOONNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNONNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNHHHHHPPPGFFPPONNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNOONNNNNNNNNNNNNONOONNNSSSSSSKSSSSSSSSSSSSSSSSSSSSSHMHHCCCCPPPGPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFNNMNNNMNONMMNNNNMNNFGGFKPPPPFGFPPNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNONNNNONNNNNOOMHNNNNNNNNNNNNNNNNNNNNNMNNNNNNNFNNNNNNNONNNNNNNCCCFPGPGPFPNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNONNNNONNNNNNNNNNNNNNNNNNNNNNNNONNNNPGPPPPFFGFPGPFNNNNNNNNNNNNNNONNNNOOHONNONNNNNNNNNNNNNNNNNNNNNNNNHOOONNNNNHONONOONNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNOOOOOFFNNNNNOONNNNNNNNNNNNNNNNNOOONNNNNNNNNONOONNFFFOOOOOOOOOOONONNNNNNNNOONOOONNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNCCCCCCCFNNNNNNNNNONNNNONNNNNPFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHPPPPPPPPPPPPPPPPKGKGPPPPRPPPPRNNNNNNNNNNNNNMNNNNNNNMNNNNNNNNNNNMNNNNNNNNNNNNNMOOOOOOOOOOOOOOOSSSSSSSSSSSSSSSSSSSSSSHFGPKNNNNNMNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNOOCCCCCCFNNNNOONNNOONNONNNNNNNIKFOFIKFKFNNOMNNOOMMMMMNNMNMMONMOONNONNNMNMMONFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFKRKKKRRNNMMMNONNMNMMMNONMNNNNMMMNIFIIINNNNNNNOOOONNNNNNOOOONNNNNNNNNTPPPPPPOFFFFFGGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNOONONNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONOONNNNNNNNONNNNNNNN","n":["algorithm","app","block_sync","event_bus","events","hotstuff","logging","networking","pacemaker","replica","state","types","Algorithm","app","block_sync_client","block_tree","borrow","borrow_mut","chain_id","execute","from","hotstuff","into","new","pacemaker","pm_stub","shutdown_signal","start","try_from","try_into","type_id","vzip","App","Invalid","ProduceBlockRequest","ProduceBlockResponse","Valid","ValidateBlockRequest","ValidateBlockResponse","app_state_updates","block_tree","block_tree","block_tree_view","block_tree_view","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cur_view","cur_view","data","data_hash","from","from","from","from","into","into","into","into","new","new","parent_block","parent_block","produce_block","proposed_block","proposed_block","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate_block","validate_block_for_sync","validator_set_updates","vzip","vzip","vzip","vzip","app_state_updates","validator_set_updates","client","messages","server","BlockSyncClient","BlockSyncClientConfiguration","BlockSyncClientError","BlockSyncClientState","BlockTreeError","available_sync_servers","blacklist","blacklist_contains_server_address","blacklist_expiry_time","blacklist_sync_server","block_sync_client_state","block_sync_trigger_min_view_difference","block_sync_trigger_timeout","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","config","event_publisher","fmt","from","from","from","from","from","highest_pc_view","initialize","into","into","into","into","is_sync_server_address","last_progress_or_sync_time","new","on_receive_advertise_block","on_receive_advertise_pc","on_receive_msg","random_sync_server","receiver","register_or_update_sync_server","remove_expired_blacklisted_servers","request_limit","response_timeout","sender","sync","sync_with","tick","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validator_set_update_handle","vzip","vzip","vzip","vzip","AdvertiseBlock","AdvertiseBlock","AdvertisePC","AdvertisePC","BlockSyncAdvertiseMessage","BlockSyncMessage","BlockSyncRequest","BlockSyncRequest","BlockSyncResponse","BlockSyncResponse","advertise_block","advertise_pc","block_sync_request","block_sync_response","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","chain_id","chain_id","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_variant","deserialize_variant","from","from","from","from","from","from","highest_committed_block_height","highest_pc","highest_pc","into","into","into","into","into","into","limit","message_bytes","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature_bytes","size","start_height","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","BlockSyncServer","BlockSyncServerConfiguration","advertise_time","block_tree_camera","borrow","borrow","borrow_mut","borrow_mut","chain_id","config","event_publisher","from","from","into","into","keypair","last_advertisement","new","receiver","request_limit","sender","shutdown_signal","start","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","EventHandlers","HandlerPair","HandlerPtr","advance_view_handlers","borrow","borrow","borrow_mut","borrow_mut","collect_pc_handlers","collect_tc_handlers","commit_block_handlers","end_sync_handlers","fire_handlers","from","from","insert_block_handlers","into","into","is_empty","is_empty","logging_handler","new","new","new_view_handlers","nudge_handlers","phase_vote_handlers","propose_handlers","prune_block_handlers","receive_advance_view_handlers","receive_new_view_handlers","receive_nudge_handlers","receive_phase_vote_handlers","receive_proposal_handlers","receive_sync_request_handlers","receive_timeout_vote_handlers","send_sync_response_handlers","start_event_bus","start_sync_handlers","start_view_handlers","timeout_vote_handlers","try_from","try_from","try_into","try_into","type_id","type_id","update_highest_pc_handlers","update_highest_tc_handlers","update_locked_pc_handlers","update_validator_set_handlers","user_defined_handler","view_timeout_handlers","vzip","vzip","AdvanceView","AdvanceViewEvent","CollectPC","CollectPCEvent","CollectTC","CollectTCEvent","CommitBlock","CommitBlockEvent","EndSync","EndSyncEvent","Event","InsertBlock","InsertBlockEvent","NewView","NewViewEvent","Nudge","NudgeEvent","PhaseVote","PhaseVoteEvent","Propose","ProposeEvent","PruneBlock","PruneBlockEvent","ReceiveAdvanceView","ReceiveAdvanceViewEvent","ReceiveNewView","ReceiveNewViewEvent","ReceiveNudge","ReceiveNudgeEvent","ReceivePhaseVote","ReceivePhaseVoteEvent","ReceiveProposal","ReceiveProposalEvent","ReceiveSyncRequest","ReceiveSyncRequestEvent","ReceiveTimeoutVote","ReceiveTimeoutVoteEvent","SendSyncResponse","SendSyncResponseEvent","StartSync","StartSyncEvent","StartView","StartViewEvent","TimeoutVote","TimeoutVoteEvent","UpdateHighestPC","UpdateHighestPCEvent","UpdateHighestTC","UpdateHighestTCEvent","UpdateLockedPC","UpdateLockedPCEvent","UpdateValidatorSet","UpdateValidatorSetEvent","ViewTimeout","ViewTimeoutEvent","advance_view","advance_view","block","block","block","blocks","blocks_synced","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause_block","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","get_logger","highest_pc","highest_pc","highest_tc","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","limit","locked_pc","new_view","new_view","nudge","nudge","origin","origin","origin","origin","origin","origin","peer","peer","peer","peer","phase_certificate","phase_vote","proposal","proposal","publish","start_height","timeout_certificate","timeout_vote","timeout_vote","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validator_set_updates","view","view","vote","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","implementation","messages","roles","sequence_flow","types","AllLeadersProposed","BlockTreeError","HotStuff","HotStuffConfiguration","HotStuffError","OneLeaderProposed","ProposalStatus","WaitingForProposal","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","clone","clone_into","config","enter_view","event_publisher","fmt","from","from","from","from","from","has_one_leader_proposed","have_all_leaders_proposed","into","into","into","into","is_view_outdated","keypair","new","on_receive_msg","on_receive_new_view","on_receive_nudge","on_receive_phase_vote","on_receive_proposal","phase_vote_collectors","proposal_status","sender_handle","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validator_set_update_handle","view_info","vzip","vzip","vzip","vzip","leader","HotStuffMessage","NewView","NewView","Nudge","Nudge","PhaseVote","PhaseVote","Proposal","Proposal","block","block","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","chain_id","chain_id","chain_id","chain_id","chain_id","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_variant","from","from","from","from","from","from","from","from","from","highest_pc","into","into","into","into","into","into","justify","message_bytes","new","new","phase","serialize","serialize","serialize","serialize","serialize","signature","signature_bytes","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view","view","view","view","view","view","view","vzip","vzip","vzip","vzip","vzip","is_phase_voter","is_proposer","is_validator","new_view_recipients","phase_vote_recipient","Commit","Decide","Generic","Phase","PhaseCertificate","PhaseVoteCollector","Precommit","Prepare","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain_id","chain_id","chain_id","clone","clone","clone","clone_into","clone_into","clone_into","collect","deserialize_reader","deserialize_reader","deserialize_variant","eq","eq","equivalent","equivalent","fmt","from","from","from","genesis_pc","hash","into","into","into","is_block_justify","is_commit","is_correct","is_correctly_signed","is_decide","is_generic","is_genesis_pc","is_nudge_justify","is_precommit","is_prepare","new","phase","serialize","serialize","signature_sets","signatures","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validator_set","validator_set","view","view","view","vzip","vzip","vzip","ADVANCE_VIEW","COLLECT_PC","COLLECT_TC","COMMIT_BLOCK","END_SYNC","INSERT_BLOCK","Logger","NEW_VIEW","NUDGE","PHASE_VOTE","PROPOSE","PRUNE_BLOCK","RECEIVE_ADVANCE_VIEW","RECEIVE_NEW_VIEW","RECEIVE_NUDGE","RECEIVE_PHASE_VOTE","RECEIVE_PROPOSAL","RECEIVE_SYNC_REQUEST","RECEIVE_TIMEOUT_VOTE","SEND_SYNC_RESPONSE","START_SYNC","START_VIEW","TIMEOUT_VOTE","UPDATE_HIGHEST_PC","UPDATE_HIGHEST_TC","UPDATE_LOCKED_PC","UPDATE_VALIDATOR_SET","VIEW_TIMEOUT","first_seven_base64_chars","get_logger","progress_certificate_info","secs_since_unix_epoch","messages","network","receiving","sending","BlockSyncAdvertiseMessage","BlockSyncMessage","HotStuffMessage","Message","PacemakerMessage","ProgressMessage","ProgressMessage","borrow","borrow","borrow_mut","borrow_mut","chain_id","clone","clone","clone_into","clone_into","deserialize_reader","deserialize_reader","deserialize_variant","deserialize_variant","from","from","from","from","from","from","from","into","into","is_block_sync_trigger_msg","serialize","serialize","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","view","vzip","vzip","Network","ValidatorSetUpdateHandle","borrow","borrow_mut","broadcast","clone","clone_into","from","init_validator_set","into","network","new","recv","send","to_owned","try_from","try_into","type_id","update_validator_set","update_validator_set","vzip","BlockSyncClientStub","BlockSyncRequestReceiveError","BlockSyncResponseReceiveError","BlockSyncServerStub","Cacheable","Disconnected","Disconnected","Disconnected","NotAvailable","ProgressMessageBuffer","ProgressMessageReceiveError","ProgressMessageStub","Timeout","Timeout","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_capacity","buffer_size","fmt","fmt","fmt","from","from","from","from","from","from","from","get_msg","insert","into","into","into","into","into","into","into","msg_buffer","new","new","new","new","receiver","recv","recv_request","recv_response","remove_expired_msgs","remove_highest_viewed_msgs","requests","responses","size","start_polling","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view","vzip","vzip","vzip","vzip","vzip","vzip","vzip","SenderHandle","borrow","borrow_mut","broadcast","clone","clone_into","from","into","network","new","send","to_owned","try_from","try_into","type_id","vzip","messages","protocol","types","AdvanceView","AdvanceView","PacemakerMessage","PhaseCertificate","ProgressCertificate","TimeoutCertificate","TimeoutVote","TimeoutVote","advance_view","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","chain_id","chain_id","chain_id","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_variant","deserialize_variant","from","from","from","from","from","from","highest_tc","into","into","into","into","into","message_bytes","progress_certificate","serialize","serialize","serialize","serialize","signature","signature_bytes","size","size","timeout_vote","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","view","view","view","view","view","vzip","vzip","vzip","vzip","BlockTreeError","ExtendViewError","ExtendViewError","GetViewTimeoutError","GetViewTimeoutError","NonIncreasingViewError","Pacemaker","PacemakerConfiguration","PacemakerError","PacemakerState","TriedToExtendNonEpochView","UpdateViewError","UpdateViewError","ViewInfo","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","clone","clone","clone_into","clone_into","config","deadline","epoch","epoch_length","eq","equivalent","event_publisher","extend_epoch_view_timeout","extend_view","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","initial_timeouts","initialize","into","into","into","into","into","into","into","is_epoch_change_view","keypair","last_advance_view","max_view_time","new","new","on_receive_advance_view","on_receive_msg","on_receive_timeout_vote","select_leader","sender","set_timeouts","state","tick","timeout_vote_collectors","timeouts","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_view","view","view_info","view_info","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_new_timeout","view","view","cur_view","next_view","view","TimeoutCertificate","TimeoutVoteCollector","borrow","borrow","borrow_mut","borrow_mut","chain_id","chain_id","chain_id","clone","clone","clone_into","clone_into","collect","deserialize_reader","eq","eq","equivalent","from","from","into","into","is_correct","is_correctly_signed","new","serialize","signature_set","signature_set_power","signatures","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validator_set","validator_set","view","view","view","vzip","vzip","Configuration","Replica","ReplicaSpec","algorithm","algorithm_shutdown","app","block_sync_blacklist_expiry_time","block_sync_request_limit","block_sync_response_timeout","block_sync_server","block_sync_server_advertise_time","block_sync_server_shutdown","block_sync_trigger_min_view_difference","block_sync_trigger_timeout","block_tree_camera","block_tree_camera","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","builder","chain_id","configuration","drop","epoch_length","event_bus","event_bus_shutdown","from","from","from","initialize","into","into","into","into","kv_store","log_events","max_view_time","me","network","on_advance_view","on_collect_pc","on_collect_tc","on_commit_block","on_end_sync","on_insert_block","on_new_view","on_nudge","on_phase_vote","on_propose","on_prune_block","on_receive_advance_view","on_receive_new_view","on_receive_nudge","on_receive_phase_vote","on_receive_proposal","on_receive_sync_request","on_receive_timeout_vote","on_send_sync_response","on_start_sync","on_start_view","on_timeout_vote","on_update_highest_pc","on_update_highest_tc","on_update_locked_pc","on_update_validator_set","on_view_timeout","poller","poller_shutdown","progress_msg_buffer_capacity","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","app_block_tree_view","block_tree","block_tree_snapshot","invariants","kv_store","paths","write_batch","AppBlockTreeView","app_state","block","block_at_height","block_data","block_data_hash","block_data_len","block_datum","block_height","block_justify","block_tree","borrow","borrow_mut","from","into","pending_ancestors_app_state_updates","try_from","try_into","type_id","validator_set","vzip","BlockExpectedButNotFound","BlockTree","BlockTreeError","KVGetError","KVSetError","app_view","block","block_at_height","block_data","block_data_hash","block_data_len","block_datum","block_height","block_justify","blocks_in_branch","borrow","borrow","borrow_mut","borrow_mut","children","commit","committed_app_state","committed_validator_set","contains","delete_branch","delete_siblings","fmt","from","from","from","from","highest_committed_block","highest_committed_block_height","highest_pc","highest_tc","highest_view_entered","highest_view_voted","highest_view_with_progress","initialize","insert","into","into","locked_pc","new","new_unsafe","pending_app_state_updates","publish_update_block_tree_events","set_highest_tc","set_highest_view_entered","set_highest_view_phase_voted","snapshot","try_from","try_from","try_into","try_into","type_id","type_id","update","validator_set_state","validator_set_updates_status","vzip","vzip","write","block","BlockTreeCamera","BlockTreeSnapshot","block","block_at_height","block_data","block_data_hash","block_data_len","block_datum","block_height","block_justify","blocks_from_height_to_newest","blocks_from_newest_to_committed","borrow","borrow","borrow_mut","borrow_mut","children","clone","clone_into","committed_app_state","committed_validator_set","from","from","highest_committed_block","highest_committed_block_height","highest_pc","highest_tc","highest_view_entered","highest_view_voted","into","into","locked_pc","new","new","newest_block","pending_app_state_updates","previous_validator_set","snapshot","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validator_set_state","validator_set_update_block_height","validator_set_update_complete","validator_set_updates_status","vzip","vzip","block_to_commit","extends_locked_pc_block","pc_to_lock","repropose_block","safe_block","safe_nudge","safe_pc","BlockAtHeight","BlockChildren","BlockData","BlockDataHash","BlockDataLength","BlockHeight","BlockJustify","CommittedAppState","CommittedValidatorSet","DeserializeValueError","Ed25519DalekError","HighestCommittedBlock","HighestPC","HighestTC","HighestViewEntered","HighestViewPhaseVoted","KVGet","KVGetError","KVStore","Key","LockedPC","NewestBlock","PendingAppStateUpdates","PreviousValidatorSet","Snapshot","ValidatorSetUpdateDecided","ValidatorSetUpdateHeight","ValidatorSetUpdatesStatus","ValueExpectedButNotFound","WriteBatch","block","block_at_height","block_data","block_data_hash","block_data_len","block_datum","block_height","block_justify","borrow","borrow","borrow_mut","borrow_mut","children","clear","committed_app_state","committed_validator_set","fmt","fmt","fmt","from","from","get","highest_committed_block","highest_pc","highest_tc","highest_view_entered","highest_view_phase_voted","into","into","locked_pc","newest_block","pending_app_state_updates","previous_validator_set","snapshot","to_string","try_from","try_from","try_into","try_into","type_id","type_id","validator_set_state","validator_set_update_block_height","validator_set_update_complete","validator_set_updates_status","vzip","vzip","write","key","key","key","source","source","block","block","block","block","block","block","block","block","height","key","BLOCKS","BLOCK_AT_HEIGHT","BLOCK_DATA","BLOCK_DATA_HASH","BLOCK_DATA_LEN","BLOCK_HEIGHT","BLOCK_JUSTIFY","BLOCK_TO_CHILDREN","COMMITTED_APP_STATE","COMMITTED_VALIDATOR_SET","HIGHEST_COMMITTED_BLOCK","HIGHEST_PC","HIGHEST_TC","HIGHEST_VIEW_ENTERED","HIGHEST_VIEW_PHASE_VOTED","LOCKED_PC","NEWEST_BLOCK","PENDING_APP_STATE_UPDATES","PREVIOUS_VALIDATOR_SET","VALIDATOR_SET_UPDATES_STATUS","VALIDATOR_SET_UPDATE_BLOCK_HEIGHT","VALIDATOR_SET_UPDATE_DECIDED","combine","BlockTreeWriteBatch","KVSetError","SerializeValueError","WriteBatch","apply_app_state_updates","borrow","borrow","borrow_mut","borrow_mut","delete","delete_block","delete_block_validator_set_updates","delete_children","delete_committed_app_state","delete_pending_app_state_updates","fmt","from","from","into","into","new","new","new_unsafe","set","set_block","set_block_at_height","set_children","set_committed_app_state","set_committed_validator_set","set_committed_validator_set_updates","set_highest_committed_block","set_highest_pc","set_highest_tc","set_highest_view_entered","set_highest_view_phase_voted","set_locked_pc","set_newest_block","set_pending_app_state_updates","set_pending_validator_set_updates","set_previous_validator_set","set_validator_set_update_block_height","set_validator_set_update_decided","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","key","source","block","crypto_primitives","data_types","signed_messages","update_sets","validator_set","Block","borrow","borrow_mut","clone","clone_into","data","data_hash","deserialize_reader","from","hash","hash","height","into","is_correct","justify","new","serialize","to_owned","try_from","try_into","type_id","vzip","CryptoHasher","Digest","Keypair","R","Signature","SignatureError","Signer","SigningKey","Verifier","VerifyingKey","borrow","borrow_mut","buffer","chain_update","clone","clone_into","compressed","core","digest","finalize","finalize_into","finalize_into_reset","finalize_reset","from","into","new","new","new_with_prefix","output_size","point","public","reset","s","secret_key","sign","sign","source","to_owned","try_from","try_into","try_sign","type_id","update","verify","verifying_key","vzip","BlockHeight","BufferSize","ChainID","ChildrenList","CryptoHash","Data","DataLen","Datum","EpochLength","Power","SignatureBytes","SignatureSet","TotalPower","ViewNumber","add","add","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","deserialize_reader","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","genesis","get","hash","hash","hash","hash","hash","init","int","int","int","int","int","int","int","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iter","iter","iter","len","len","new","new","new","new","new","new","new","new","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","push","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","sub","sub","sub","sub_assign","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","vec","vec","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ActiveCollectorPair","Certificate","Certificate","Collector","SignedMessage","Vote","Vote","Vote","borrow","borrow_mut","chain_id","chain_id","collect","collect","cvs_collector","from","into","is_correct","is_correct","is_correctly_signed","message_bytes","new","new","pvs_collector","quorum","signature_bytes","try_from","try_into","type_id","update_validator_sets","validator_set","view","view","vzip","AppStateUpdates","UpdateSet","ValidatorSetUpdates","ValidatorSetUpdatesBytes","VerifyingKeyBytes","borrow","borrow_mut","clone","clone_into","contains_delete","delete","deletes","deletes","deletes","deletes","deletes","deserialize_reader","from","from","get_insert","insert","inserts","inserts","inserts","inserts","inserts","into","new","serialize","to_owned","try_from","try_from","try_into","type_id","vzip","BYTE_SIZE","Committed","Committed","None","None","Pending","Pending","R","Signature","SigningKey","ValidatorSet","ValidatorSetBytes","ValidatorSetState","ValidatorSetUpdatesStatus","ValidatorSetUpdatesStatusBytes","VerifyingKey","apply_updates","as_bytes","as_bytes","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","committed_validator_set","committed_validator_set","compressed","contains","contains_updates","ct_eq","default","default","deserialize_reader","deserialize_reader","deserialize_variant","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_components","from_keypair_bytes","from_slice","from_str","generate","hash","into","into","into","into","into","into","into","into","into","is_empty","is_pending","is_weak","len","new","new","point","position","power","powers","powers","previous_validator_set","previous_validator_set","put","quorum","r_bytes","remove","s","s_bytes","secret_key","serialize","serialize","to_bytes","to_bytes","to_bytes","to_bytes","to_keypair_bytes","to_montgomery","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar","to_scalar_bytes","to_string","to_vec","total_power","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_decided","update_decided","update_height","update_height","validators","validators","validators","validators_and_powers","verify","verify","verify","verify_strict","verify_strict","verifying_key","verifying_key","verifying_key","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"hotstuff_rs"],[12,"hotstuff_rs::algorithm"],[32,"hotstuff_rs::app"],[90,"hotstuff_rs::app::ValidateBlockResponse"],[92,"hotstuff_rs::block_sync"],[95,"hotstuff_rs::block_sync::client"],[164,"hotstuff_rs::block_sync::messages"],[271,"hotstuff_rs::block_sync::server"],[302,"hotstuff_rs::event_bus"],[356,"hotstuff_rs::events"],[729,"hotstuff_rs::hotstuff"],[734,"hotstuff_rs::hotstuff::implementation"],[798,"hotstuff_rs::hotstuff::implementation::ProposalStatus"],[799,"hotstuff_rs::hotstuff::messages"],[904,"hotstuff_rs::hotstuff::roles"],[909,"hotstuff_rs::hotstuff::types"],[986,"hotstuff_rs::logging"],[1018,"hotstuff_rs::networking"],[1022,"hotstuff_rs::networking::messages"],[1066,"hotstuff_rs::networking::network"],[1087,"hotstuff_rs::networking::receiving"],[1181,"hotstuff_rs::networking::sending"],[1197,"hotstuff_rs::pacemaker"],[1200,"hotstuff_rs::pacemaker::messages"],[1283,"hotstuff_rs::pacemaker::protocol"],[1398,"hotstuff_rs::pacemaker::protocol::ExtendViewError"],[1400,"hotstuff_rs::pacemaker::protocol::UpdateViewError"],[1403,"hotstuff_rs::pacemaker::types"],[1447,"hotstuff_rs::replica"],[1533,"hotstuff_rs::state"],[1540,"hotstuff_rs::state::app_block_tree_view"],[1561,"hotstuff_rs::state::block_tree"],[1624,"hotstuff_rs::state::block_tree::BlockTreeError"],[1625,"hotstuff_rs::state::block_tree_snapshot"],[1676,"hotstuff_rs::state::invariants"],[1683,"hotstuff_rs::state::kv_store"],[1761,"hotstuff_rs::state::kv_store::KVGetError"],[1766,"hotstuff_rs::state::kv_store::Key"],[1776,"hotstuff_rs::state::paths"],[1799,"hotstuff_rs::state::write_batch"],[1849,"hotstuff_rs::state::write_batch::KVSetError"],[1851,"hotstuff_rs::types"],[1857,"hotstuff_rs::types::block"],[1879,"hotstuff_rs::types::crypto_primitives"],[1925,"hotstuff_rs::types::data_types"],[2217,"hotstuff_rs::types::signed_messages"],[2251,"hotstuff_rs::types::update_sets"],[2286,"hotstuff_rs::types::validator_set"],[2491,"std::sync::mpsc"],[2492,"std::sync::mpsc"],[2493,"std::thread"],[2494,"core::result"],[2495,"core::any"],[2496,"core::time"],[2497,"core::fmt"],[2498,"core::fmt"],[2499,"std::io::error"],[2500,"std::io"],[2501,"std::io"],[2502,"alloc::boxed"],[2503,"core::hash"],[2504,"alloc::string"],[2505,"std::time"],[2506,"core::clone"],[2507,"core::convert"],[2508,"std::time"],[2509,"core::iter::traits::iterator"],[2510,"core::convert"],[2511,"signature::error"],[2512,"core::cmp"],[2513,"core::slice::iter"],[2514,"core::cmp"],[2515,"std::collections::hash::map"],[2516,"subtle"],[2517,"core::fmt"],[2518,"curve25519_dalek::edwards"],[2519,"ed25519_dalek::hazmat"],[2520,"rand_core"],[2521,"core::marker"],[2522,"curve25519_dalek::montgomery"],[2523,"curve25519_dalek::scalar"]],"d":["Thread that drives the event-driven implementations of the …","Pluggable, replicable applications.","Subprotocol that “catches-up” the local block tree in …","Thread that receives events emitted by the algorithm and …","Subscribable events that are published when significant …","Subprotocol for committing <code>Block</code>s.","Functions that log out events.","Pluggable peer-to-peer (P2P) networking.","Subprotocol for synchronizing view numbers.","Methods for building and running a replica as well as …","Persistent state of a replica.","Types and traits that are used across multiple …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Trait implemented by applications that are to be …","Indicates either that <code>ValidateBlockRequest::proposed_block</code> …","Request for an <code>App</code> to produce a new block extending a …","Response from an <code>App</code> to a <code>ProduceBlockRequest</code>.","Indicates that <code>ValidateBlockRequest::proposed_block</code> is …","Request for the app to validate a proposed block. Contains …","Response from an <code>App</code> upon receiving a <code>ValidateBlockRequest</code>.","The <code>AppStateUpdates</code> that the produced block will cause …","Get a current view of the block tree that this …","Get a current view of the block tree that this …","","","","","","","","","","","Get the current view of the replica.","","The <code>data</code> field of the produced block.","The <code>data_hash</code> field of the produced block.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ProduceBlockRequest</code>.","Create a new <code>ValidateBlockRequest</code>.","Get the parent block of the block that this <code>produce_block</code> …","","Called by HotStuff-rs when the replica becomes a leader …","Get the block that this <code>validate_block</code> call should …","","","","","","","","","","","","","","Called by HotStuff-rs when the replica receives a <code>Proposal</code> …","Called when the replica is syncing and receives a …","The <code>ValidatorSetUpdates</code> that the produced block will cause …","","","","","The <code>AppStateUpdates</code> that the proposed block will cause …","The <code>ValidatorSetUpdates</code> that the proposed block will cause …","Implements the <code>BlockSyncClient</code>, which helps a replica …","Definitions for structured messages that are sent between …","Implements the <code>BlockSyncServer</code> for the block sync …","","Configuration parameters that define the behaviour of the …","The block sync client may fail if there is an error when …","","","Replicas that are currently available to be sync servers,","A list of replicas (identified by their public addresses) …","Check if a given server address is in the blacklist.","Time after which a blacklisted sync server should be …","Blacklist a given sync server by:","","By how many views a PC received via <code>AdvertisePC</code> must be …","How much time needs to pass without any progress (i.e., …","","","","","","","","","Chain ID of the target blockchain. The block sync client …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Cached value of <code>block_tree.highest_pc().view</code>.","Initialize the internal state of the block sync client.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether a given verifying key is recognised as a …","The most recent instant in time when either:","Create a new instance of the BlockSyncClient.","Process an <code>AdvertiseBlock</code> message. This can lead to …","Process an <code>AdvertisePC</code> message. This can lead to …","Process a received <code>BlockSyncAdvertiseMessage</code>.","Select a random sync server from available sync servers, …","","","Remove all sync servers whose blacklisting has expired …","The maximum number of blocks requested with every block …","Timeout for waiting for a single block sync response.","","Sync with a randomly selected peer.","Sync with a given peer. This involves possibly multiple …","Update the <code>BlockSyncClient</code>’s internal state, and …","","","","","","","","","","","","","","","","","","A message periodically broadcasted by the sync server to:","","A message periodically broadcasted by the sync server to …","","Messages periodically broadcasted by the sync server to …","Messages exchanged between a sync server and a sync client …","Sync request sent by a sync client to a sync server. The …","","Sync response sent by a sync server to a sync client …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parameters that are used to configure the behaviour of the …","How often the sync server should broadcast …","","","","","","ID of the blockchain for which the server handles sync …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keypair used to sign Advertise Block messages.","","","","Maximum number of blocks that this server can provide in a …","","","","","","","","","","","","Stores the <code>HandlerPair</code> of user-defined and optional …","Stores the two optional handlers enabled for an event type …","Pointer to a handler closure, parametrised by the argument …","","","","","","","","","","Triggers the execution of each of the two handlers - the …","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if no handlers are defined, i.e., neither …","","Creates a new <code>HandlerPair</code> with the user-defined handler, …","Creates the handler pairs for all pre-defined event types …","","","","","","","","","","","","","","Starts the event bus thread, which runs an infinite loop …","","","","","","","","","","","","","","","","","","","The replica broadcasted an advance view message to all …","","The replica collected a new <code>phase_certificate</code> from the …","","The replica collected a new <code>timeout_certificate</code> from the …","","A block, identifiable by its <code>CryptoHash</code>, was committed. …","","The replica exited sync mode, during which it tried to …","Enumerates all events defined for HotStuff-rs.","","A new <code>block</code> was inserted into the Block Tree in a …","","The replica sent a new view message for its current view …","","The replica nudged for a block by broadcasting a nudge for …","","The replica voted for a phase of a block by sending …","","The replica proposed a block by broadcasting it as a …","","A block, identified by its <code>CryptoHash</code>, was “pruned” …","","The replica received an <code>advance_view</code> message from another …","","The replica received a new view message for the current …","","The replica received a <code>nudge</code> for the replica’s current …","","The replica received a <code>phase_vote</code> for the replica’s …","","The replica received a <code>proposal</code> for the replica’s …","","The replica’s sync server received a sync request from a …","","The replica received a <code>timeout_certificate</code> for the replica…","","The replica’s sync server sent a sync response to a peer …","","The replica entered sync mode and tried to sync with a …","","The replica started a new view with a given <code>ViewNumber</code>.","","The replica broadcasted a timeout vote message to all …","","The Highest <code>PhaseCertificate</code>, stored in the <code>Block Tree</code>, …","","The Highest Timeout Certificate, stored in the <code>BlockTree</code>, …","","The Locked <code>PhaseCertificate</code>, stored in the <code>Block Tree</code>, was …","","The committed validator set, stored in the Block Tree, was …","","The replica’s view, with a given <code>ViewNumber</code>, timed out.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Publishes a given instance of the <code>Event</code> enum on the event …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Event-driven implementation of the HotStuff subprotocol, …","Messages that are sent between replicas as part of the …","Functions that determine what roles a replica should play …","Specification of the sequence flow of the event-driven …","Types specific to the HotStuff subprotocol.","All leaders for the view have proposed or nudged, hence no …","","A participant in the HotStuff subprotocol.","Immutable parameters that define the behaviour of the …","The different ways calls to methods of the <code>HotStuff</code> struct …","The leader with a given public key has already proposed or …","Keeps track of the set of <code>Proposal</code>s that have been …","No proposal or nudge was seen in this view so far. …","","","","","","","","","","","","","On receiving a new <code>ViewInfo</code> from the <code>Pacemaker</code>, send …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Has this leader already proposed/nudged in the current …","Have all (max. 2) leaders already proposed/nudged in this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the HotStuff internal view is outdated with …","","Create a new HotStuff subprotocol participant.","Process a newly received message for the current view …","Process the received NewView.","Process the received nudge.","Process a received <code>phase_vote</code>.","Process a newly received <code>proposal</code>.","","","","","","","","","","","","","","","","","","","","","","","","Every kind of message sent between replicas as part of the …","Message sent by a replica to the leaders of the next view …","See <code>NewView</code>.","Message broadcasted by a leader in <code>view</code> to “nudge” …","See <code>Nudge</code>.","Message sent by a validator to a leader of <code>view + 1</code> to …","See <code>PhaseVote</code>.","Message broadcasted by a leader in <code>view</code> to propose to …","See <code>Proposal</code>.","A <code>Block</code> extending the chain identified by <code>chain_id</code>.","<code>block</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with this …","","","","","","","","","","","Get the <code>ChainID</code> associated with the <code>HotStuffMessage</code>.","","<code>ChainID</code> of the block tree that this <code>Proposal</code> should extend.","<code>ChainID</code> of the block tree that <code>justify.block</code> is part of.","<code>chain_id</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with …","<code>ChainID</code> of the block tree that <code>highest_pc.block</code> is part of.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The sending replica’s <code>highest_pc</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>PhaseVote</code>s for this <code>Nudge</code> should be for the <code>Phase</code> …","","Create a new <code>Nudge</code> message containing the given <code>chain_id</code>, …","Create a <code>PhaseVote</code> for the given <code>chain_id</code>, <code>view</code>, <code>block</code>, …","<code>phase</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with this …","","","","","","Digital signature formed using","","Returns the number of bytes required to store a given …","","","","","","","","","","","","","","","","","","","","","","Get the view number associated with a given <code>HotStuffMessage</code>…","","","Current <code>ViewNumber</code> of the proposer that created this …","Current <code>ViewNumber</code> of the proposer that created this <code>Nudge</code>.","<code>view</code> field of the <code>Proposal</code> or <code>Nudge</code> associated with this …","The <code>view</code> that the replica sending this <code>NewView</code> is exiting.","","","","","","Determine whether or not <code>replica</code> should phase-vote for the …","Determine whether <code>validator</code> should act as a proposer in …","Determine whether the <code>replica</code> is an “active” …","Identify the leader(s) that <code>new_view</code> should be sent to, …","Identify the leader that <code>phase_vote</code> should be sent to, …","Commit phase. The <strong>third</strong> voting phase in the phased mode.","Decide phase. The <strong>fourth</strong> and final voting phase in the …","Generic phase. The only voting phase in the pipelined mode.","HotStuff subprotocol voting phases.","Cryptographic proof that at least a quorum of validators …","A struct that incrementally forms <code>PhaseCertificate</code>s by …","Precommit phase. The <strong>second</strong> voting phase in the phased …","Prepare phase. The <strong>first</strong> voting phase in the phased mode.  ","","","","","","","","","","","","","","","","","Collect <code>phase_vote</code> using this collector. Return a Phase …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the “Genesis Phase Certificate”, the phase …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether <code>self.phase</code> is a variant that is allowed for …","","Determine the appropriate validator set that the PC should …","Check if all of the signatures in the certificate are …","","","Check whether this <code>PhaseCertificate</code> is the <code>genesis_pc</code>.","Check whether <code>self.phase</code> is a veriant that is allowed for …","","","","","","","For each key-value pair in this HashMap:","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implemented by event types. Used to get a closure that …","","","","","","","","","","","","","","","","","","","","","","","Returns a pointer to the default logging handler for a …","","","","","","","","","","","","A message that serves to advance the consensus process, …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Handle for informing the Network Provider about validator …","","","Send a message to all peers (including listeners) without …","","","Returns the argument unchanged.","Inform the network provider the validator set on wake-up.","Calls <code>U::from(self)</code>.","","Create a new update handle.","Receive a message from any peer. Returns immediately with …","Send a message to the specified peer without blocking.","","","","","Inform the networking provider of updates to the validator …","Inform the network provider of new validator set <code>updates</code> …","","A receiving end for sync responses. The …","","","A receiving end for sync requests. The …","A cacheable message can be inserted into the progress …","","","","","Message buffer intended for storing received …","","A receiving end for <code>ProgressMessages</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If there are messages for this view in the buffer, remove …","Try inserting the message into the buffer. In case caching …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a fresh ProgressMessageStub with a given receiver …","Create an empty message buffer.","","","","Receive a message matching the specified <code>chain_id</code>, and …","Receive a BlockSyncRequest if available, else return …","Receive a BlockSyncResponse from a given peer. Waits for …","Remove all messages for views less than the current view.","Given the number of bytes that need to be removed, removes …","","","","Spawn the poller thread, which polls the <code>Network</code> for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Handle for sending and broadcasting messages to the <code>Network</code>…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Definitions for structured messages that are sent between …","Implementation of the Pacemaker protocol, based on the …","Definitions of types specific to the Pacemaker protocol.","A message containing a proof that the view can be …","","","","Proof that either:","","A vote in favour of terminating a given view and moving to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extending the view can fail in two ways:","","","","","A Pacemaker protocol for Byzantine View Synchronization …","Immutable parameters that determine the behaviour of the …","The pacemaker can fail in two fundamental ways:","Internal state of the <code>Pacemaker</code>. Keeps track of the …","","Updating the view can fail in two ways:","","Describes a view (most often the current view), in terms …","","","","","","","","","","","","","","","","","","","","","","Compute the current epoch based on the current <code>view</code> and …","","","","","Extend the timeout of the epoch-change view by another …","Extend the timeout of the current view","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return initial timeouts on starting the protocol from a …","Initializes the <code>PacemakerState</code> on starting the protocol. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether <code>view</code> is an epoch-change view given the …","","","","Create a new <code>Pacemaker</code> instance.","","Update the internal state of the pacemaker and possibly …","Update the internal state of the pacemaker and possibly …","Update the internal state of the pacemaker in response to …","Implements the Interleaved Weighted Round Robin algorithm …","","Set the timeout for each view in the epoch starting from a …","","Check the current time (‘clock tick’), and possibly …","","","","","","","","","","","","","","","","","","","","","","","","","","Update the current view to the specified <code>next_view</code>. This …","","Query the pacemaker for <code>ViewInfo</code>.","","","","","","","","","Return a given ViewInfo with updated timeout.","","","","","","Proof that at least a quorum of validators have sent a …","Helps leaders incrementally form <code>TimeoutCertificate</code>s by …","","","","","","","","","","","","Adds the timeout vote to a signature set if it has the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the signatures in the TC are correct and form a …","Checks if all of the signatures in the certificate are …","","","","","","","","","","","","","","","","","","","","","Stores the user-defined parameters required to start the …","A handle to the background threads of a HotStuff-rs …","Stores all necessary parameters and trait implementations …","","","","","","","","","","","","Returns a <code>BlockTreeCamera</code> which can be used to peek into …","","","","","","","","Create a builder for building a Configuration. On the …","Create a builder for building a ReplicaSpec. On the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initializes the replica’s Block Tree with the intial app …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Starts all threads and channels associated with running a …","","","","","","","","","","","","","Special, read-only interface for querying the Block Tree …","Internal read-and-write handle used by the algorithm …","General purpose, read-only interface for querying the …","Rules and predicates that help with maintaining the …","Pluggable key-value storage.","Byte-prefixes that specify where each Block Tree variable …","This module defines the <code>WriteBatch</code> trait for batching …","View of the block tree made available to method calls on …","Get the value associated with <code>key</code> in the current app state.","Get <code>block</code>, if it is currently in the block tree.","Get the committed block at <code>height</code>, if it is currently in …","Get the whole of <code>block.data</code>, if <code>block</code> is currently in the …","Get <code>block.data_hash</code>, if <code>block</code> is currently in the block …","Get <code>block.data.len()</code>, if <code>block</code> is currently in the block …","Get one <code>block.data[datum_index]</code>, if <code>block</code> is currently in …","Get the height of <code>block</code>, if <code>block</code> is currently in the …","Get <code>block.justify</code>, if <code>block</code> is currently in the block tree.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Get the current committed validator set.","","Unable to find a block with the specific <code>CryptoHash</code>, even …","Read and write handle into the block tree that should be …","Errors that may be encountered when reading or writing to …","Error when trying to get a value from the block tree’s …","Error when trying set a value into block tree’s …","Create an <code>AppBlockTreeView</code> which sees the app state as it …","","","","","","","","","Perform depth-first search to collect the hashes of all …","","","","","","Commit <code>block</code> and all of its ancestors, if they have not …","","","Check whether <code>block</code> exists on the block tree.","Deletes all data of blocks in a branch starting from (and …","Delete the “siblings” of the specified block, along …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get the height of the highest committed block.","","","","","Get the maximum of:","Initialize the block tree variables listed in initial state…","Insert into the block tree a <code>block</code> that will cause the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new instance of <code>BlockTree</code> on top of <code>kv_store</code>.","Create a new instance of <code>BlockTree</code> on top of <code>kv_store</code>.","","Publish all events resulting from calling <code>update</code>. These …","Set the highest <code>TimeoutCertificate</code> to be <code>tc</code>.","Set the highest view entered to be <code>view</code>.","Set the highest view phase-voted to be <code>view</code>.","Create a <code>BlockTreeSnapshot</code>.","","","","","","","Update the block tree upon seeing a safe <code>justify</code> in a <code>Nudge</code>","","","","","Atomically write the changes in <code>write_batch</code> into the …","","A factory for <code>BlockTreeSnapshot</code>s.","A read-only view into the block tree that is guaranteed to …","","","","","","","","","Get a chain of blocks starting from the specified tail …","Get a chain of blocks from the newest block up to (but not …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Get the <code>Block</code> in <code>block_tree</code> (if any) that, along with all …","Check whether <code>pc</code> belongs to the branch that extends from …","Get the PC (if any) that should be set as the Locked PC …","Get the <code>Block</code> in the <code>block_tree</code> which a leader of the …","Check whether <code>block</code> can safely cause updates to <code>block_tree</code>…","Check whether <code>nudge</code> can safely cause updates to <code>block_tree</code>…","Check whether <code>pc</code> can safely cause updates to <code>block_tree</code>, …","","","","","","","","","","","","","","","","","","Error when trying to read a value corresponding to a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concatenate two byteslices into one vector.","","Error when writing a key-value pair to the write batch. …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Block</code> type and its methods.","Cryptographic primitives.","Types that exist only to store bytes, and do not have any …","Signed messages, votes, and certificates.","","Types that store information about validator sets or …","Cryptographically hashed, <code>justify</code>-linked payload that …","","","","","","<code>App</code>-provided cryptographic hash over <code>data</code>.","","Returns the argument unchanged.","","Library-computed cryptographic hash over …","","Calls <code>U::from(self)</code>.","Checks if hash and justify are cryptographically correct.","<code>PhaseCertificate</code> linking this block with its parent block.","Create a new block with the specified <code>height</code>, <code>justify</code>, …","","","","","","","SHA-256 hasher.","Convenience wrapper trait covering functionality of …","A facade around <code>SigningKey</code> that implements method for <code>sign</code>…","","Ed25519 signature.","Errors which may occur while processing signatures and …","Sign the provided message bytestring using <code>Self</code> (e.g. a …","ed25519 signing key which can be used to produce …","Verify the provided message bytestring using <code>Self</code> (e.g. a …","An ed25519 public key.","","","","Process input data in a chained manner.","","","","","Compute hash of <code>data</code>.","Retrieve result and consume hasher instance.","Write result into provided array and consume the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new hasher instance.","Create a <code>Keypair</code> that wraps over <code>signing_key</code>.","Create new hasher instance which has processed the …","Get output size of the hasher","","Get the <code>VerifyingKey</code> of this <code>Keypair</code>.","Reset hasher instance to its initial state.","","","Sign the given message and return a digital signature","Sign an arbitrary <code>message</code> with the <code>Keypair</code>.","","","","","Attempt to sign the given message, returning a digital …","","Process data, updating the internal state.","Use <code>Self</code> to verify that the provided signature for a given …","","","Height of a block in the block tree.","Size of a buffer (in bytes).","Number that uniquely identifies a blockchain.","List of children of a particular block.","32-byte cryptographic hash.","Arbitrary, indexable data provided by an <code>App</code> to …","Number of <code>Datum</code> stored in a block’s <code>Data</code>.","Unit of <code>Data</code> that can be queried individually from the …","Configurable number of views in a Pacemaker epoch.","Weight of a specific validator’s votes in consensus …","Ed25519 digital signature.","An ordered list of <code>SignatureBytes</code> from the same …","Sum of the <code>Power</code>s of all validators in a <code>ValidatorSet</code>.","View number. Starts at 0 and increases by 1 every time the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the inner <code>[u8; 32]</code> value of this <code>CryptoHash</code>.","Get the inner <code>[u8; 64]</code> value of this <code>CryptoHash</code>.","Get a reference to the inner <code>Vec&lt;u8&gt;</code> of this <code>Datum</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create the <code>SignatureSet</code> that forms a part of the <code>genesis_pc</code>…","Get a reference to the <code>Option&lt;SignatureBytes&gt;</code> at position …","","","","","","Get the initial <code>ViewNumber</code>, which is 0.","Get the <code>u64</code> value of this <code>ChainID</code>.","Get the inner <code>u64</code> value of this <code>BlockHeight</code>.","Get the inner <code>u32</code> of this <code>DataLen</code>.","Get the inner <code>u64</code> value of this <code>Power</code>.","Get the inner <code>u128</code> value of this <code>TotalPower</code>.","Get the inner <code>u64</code> of this <code>ViewNumber</code>.","Get the inner <code>u32</code> value of this <code>EpochLength</code>.","Get the inner <code>u64</code> value of this <code>BufferSize</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through the hashes of the blocks in this …","Iterate through the <code>Datum</code>s that are in this <code>Data</code> in the …","Get an iterator over the <code>Option&lt;SignatureBytes&gt;</code>s in this …","Get how many <code>Datum</code>s are in this <code>Data</code>.","Get the length of the inner <code>Vec&lt;Option&lt;SignatureBytes&gt;&gt;</code> of …","Create a new <code>ChainID</code> with an <code>int</code> value.","Create a new <code>BlockHeight</code> with an <code>int</code> inner value.","Create a new <code>ChildrenList</code> wrapping around <code>blocks</code>.","Create a new <code>CryptoHash</code> wrapping <code>bytes</code>.","Create a new <code>SignatureBytes</code> wrapping <code>bytes</code>.","Create a new <code>Data</code> wrapping <code>datum_vec</code>.","Create a new <code>DataLen</code> wrapping <code>len</code>.","Create a new <code>Datum</code> wrapping <code>bytes</code>.","Create a new <code>Power</code> wrapping <code>int</code>.","Create a new <code>TotalPower</code> wrapping <code>int</code>.","Create a new <code>SignatureSet</code> initially containing <code>len</code> <code>None</code>s.","Create a new <code>ViewNumber</code> wrapping <code>int</code>.","Create a new <code>EpochLength</code> wrapping <code>int</code>.","Create a new <code>BufferSize</code> wrapping <code>int</code>.","","","","Add <code>hash</code> to this <code>ChildrenList</code>.","","","","","","","","","","","","","","","Set the value at <code>pos</code> in this <code>SignatureSet</code> to be <code>signature</code>.","","","","","Get the little-endian representation of the inner <code>u64</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the inner <code>Vec&lt;CryptoHash&gt;</code> value of this …","Get a reference to the inner <code>Vec&lt;Datum&gt;</code> of this <code>Data</code>.","Get a reference to the inner <code>Vec&lt;Option&lt;SignatureBytes&gt;&gt;</code> …","","","","","","","","","","","","","","","Struct that combines <code>Collector</code>s for the validator set(s) …","Data types that aggregate multiple <code>Vote</code>s of the same type …","The specific <code>Certificate</code> type that this <code>Collector</code> returns …","Types that progressively combine <code>Vote</code>s with the same …","Data types that contain: 1. A message, and 2. A digital …","Data types that indicate that a validator supports a …","The specific <code>Vote</code> type that this <code>Certificate</code> aggregates …","The specific <code>SignedMessage</code> type that this <code>Collector</code> takes …","","","Get the <code>chain_id</code> of the chain that the <code>Vote</code> is about.","Get the <code>ChainID</code> of the chain that this <code>Collector</code> is …","Collect a <code>vote</code> signed by <code>signer</code>, returning a <code>Certificate</code> …","Collect <code>message</code> with both collectors in this …","<code>Collector</code> collecting votes from the current Committed …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Check whether the certificate is “correct” ( i.e., …","Verify that <code>signature_bytes</code> is a signature created by …","Check whether the certificate is correctly signed by a …","Get the bytes that are passed as input into the signing …","Create a new instance of the <code>Collector</code>, configuring it to …","Create an <code>ActiveCollectorPair</code> for <code>chain_id</code>, <code>view</code>, and …","<code>Collector</code> collecting votes from the current Previous …","Compute the minimum voting power that a certificate …","Get the signature of the <code>SignedMessage</code>.","","","","Update the <code>ActiveCollectorPair</code>’s active validator sets …","Get the <code>ValidatorSet</code> that this <code>Collector</code> is currently …","Get the <code>view</code> that the <code>Vote</code> is about.","Get the <code>View</code> that this <code>Collector</code> is currently configured …","","Set of key-value updates committed to the App State when a …","Generic set of key-value updates that are committed when a …","Set of updates to the validator that are applied when a …","Intermediate representation of ValidatorSetUpdates for …","Internal type used for serializing and deserializing …","","","","","Check whether the <code>UpdateSet</code> is scheduled to delete <code>key</code> …","Schedule the deletion of <code>key</code> when the block that …","Get an iterator over all of the keys that this <code>UpdateSet</code> …","Deletion updates that will be committed when a <code>Block</code> is …","Deletion updates that will be committed when a <code>Block</code> is …","Deletion updates that will be committed when a <code>Block</code> is …","Deletion updates that will be committed when a <code>Block</code> is …","","","Returns the argument unchanged.","Get whether the <code>UpdateSet</code> is scheduled to insert a value …","Schedule the insertion of a <code>key</code>-<code>value</code> pair when the block …","Get an iterator over all of the key-value pairs that this …","Insertion updates that will be committed when a <code>Block</code> is …","Insertion updates that will be committed when a <code>Block</code> is …","Insertion updates that will be committed when a <code>Block</code> is …","Insertion updates that will be committed when a <code>Block</code> is …","Calls <code>U::from(self)</code>.","Create a new <code>UpdateSet</code> with empty <code>inserts</code> and <code>deletes</code>.","","","","","","","","Size of an encoded Ed25519 signature in bytes.","The block’s validator set updates have been applied to …","","The block does not update the validator set.","","The block’s validator set updates have not been applied …","","","Ed25519 signature.","ed25519 signing key which can be used to produce …","Stores the identities of validators and their voting …","Intermediate representation of <code>ValidatorSet</code> for safe …","Collection of basic information about the current (i.e., …","Wraps around <code>ValidatorSetUpdates</code>, providing additional …","Intermediate representation of <code>ValidatorSetUpdatesStatus</code> …","An ed25519 public key.","Apply validator set <code>updates</code> to the validator set. This …","Convert this <code>SigningKey</code> into a <code>SecretKey</code> reference","View this public key as a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the committed validator set.","","","Check whether the validator set contains <code>validator</code>.","Check whether the updates status is <code>Pending</code> or <code>Committed</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Derive this public key from its corresponding …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse an Ed25519 signature from a byte slice.","Construct a <code>SigningKey</code> from a <code>SecretKey</code>","Construct a <code>VerifyingKey</code> from a slice of bytes.","Parse an Ed25519 signature from its <code>R</code> and <code>s</code> components.","Construct a <code>SigningKey</code> from the bytes of a <code>VerifyingKey</code> …","Parse an Ed25519 signature from a byte slice.","","Generate an ed25519 signing key.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the validator set is empty (i.e., …","Check whether the updates status is <code>Pending</code>.","Returns whether this is a <em>weak</em> public key, i.e., if this …","Get the number of validators currently in the validator …","Create an empty validator set.","Create a new <code>ValidatorSetState</code>.","","Get the index of the given <code>validator</code> in the sorted order of","Get the power of the specified <code>validator</code> inside the …","","","Get the previous validator set.","","Put a <code>validator</code> with the specified <code>power</code> into the …","Compute the total power that a certificate must match or …","Bytes for the <code>R</code> component of a signature.","Remove <code>validator</code> from the validator set, if it actually is …","","Bytes for the <code>s</code> component of a signature.","","","","","Return the inner byte array.","Convert this <code>SigningKey</code> into a <code>SecretKey</code>","Convert this public key to a byte array.","Convert this signing key to a 64-byte keypair.","Convert this verifying key into Montgomery form.","","","","","","","","Convert this signing key into a Curve25519 scalar. This is …","Convert this signing key into a byte representation of an …","","Convert this signature into a byte vector.","Get the sum of the powers of all of the validators inside …","","","","","","","","","","","","","","","","","","","","","","Sign a message with this signing key’s secret key.","","","","","","","","","","Get whether or not the latest validator set update (the …","","Get the height of the block that caused the most recently …","","Get an iterator through validators’ verifying keys which …","","","Get a vector containing each validator and its power, in …","Verify a signature on a message with this signing key’s …","Verify a signature on a message with this signing key’s …","Verify a signature on a message with this keypair’s …","Strictly verify a signature on a message with this signing …","Strictly verify a signature on a message with this keypair…","Get the <code>VerifyingKey</code> for this <code>SigningKey</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,30,0,0,30,0,0,29,23,25,23,25,23,29,25,30,23,29,25,30,23,23,29,29,23,29,25,30,23,29,25,30,23,25,23,23,5,25,25,23,29,25,30,23,29,25,30,23,29,25,30,5,5,29,23,29,25,30,169,169,0,0,0,0,0,0,0,34,31,31,31,9,31,41,9,9,41,9,31,34,41,9,31,34,9,41,41,34,41,9,31,34,34,31,31,41,9,31,34,0,31,41,41,41,41,31,41,31,31,9,9,41,41,41,41,41,9,31,34,41,9,31,34,41,9,31,34,41,41,9,31,34,0,44,0,44,0,0,0,49,0,49,44,44,49,49,16,49,51,16,44,42,43,49,51,16,44,42,43,44,51,42,49,51,16,44,42,43,49,51,16,44,42,43,49,51,16,44,42,43,49,44,49,51,16,44,42,43,42,16,43,49,51,16,44,42,43,51,42,49,51,16,44,42,43,42,42,44,51,49,51,16,44,42,43,49,51,16,44,42,43,49,51,16,44,42,43,49,51,16,44,42,43,49,51,16,44,42,43,0,0,58,60,60,58,60,58,58,60,60,60,58,60,58,58,60,60,60,58,60,60,60,60,58,60,58,60,58,60,58,0,0,0,61,62,61,62,61,61,61,61,61,61,62,61,61,62,61,62,61,62,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,61,61,61,62,61,62,61,62,61,61,61,61,61,62,61,62,61,17,0,17,0,17,0,17,0,17,0,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,17,0,170,171,172,173,174,175,176,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,180,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,177,175,179,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,196,178,184,189,182,187,186,187,188,189,171,190,195,176,196,175,193,188,181,186,17,196,194,185,190,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,180,191,192,183,17,172,173,174,177,178,179,180,181,182,183,184,170,185,186,187,188,189,171,190,191,192,193,194,195,176,196,175,0,0,0,0,0,69,68,0,0,0,69,0,69,66,69,7,68,66,69,7,68,7,7,7,66,66,66,68,66,69,7,68,68,69,69,66,69,7,68,66,7,66,66,66,66,66,66,66,66,66,7,66,69,7,68,66,69,7,68,66,69,7,68,66,66,66,69,7,68,197,0,0,71,0,71,0,71,0,71,75,74,71,75,73,74,72,71,75,73,74,72,71,74,75,73,74,72,71,75,73,74,72,71,75,73,74,72,71,75,73,74,72,71,71,71,71,71,71,75,73,74,72,72,71,71,75,73,74,72,73,74,73,74,74,71,75,73,74,72,74,74,71,71,71,75,73,74,72,71,75,73,74,72,71,75,73,74,72,71,75,73,74,72,71,71,74,75,73,74,72,71,75,73,74,72,0,0,0,0,0,76,76,76,0,0,0,76,76,47,47,76,77,47,76,77,77,47,77,47,76,77,47,76,77,77,47,76,76,47,76,47,76,76,47,76,77,47,76,47,76,77,47,76,47,47,76,76,47,47,76,76,77,47,47,76,77,47,47,76,77,47,76,77,47,76,77,47,76,77,77,77,77,47,77,47,76,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,12,84,12,0,12,0,84,84,12,84,12,12,84,12,84,12,84,12,84,12,84,84,84,84,84,84,12,84,12,12,84,12,12,84,12,84,12,84,12,84,12,12,84,12,0,0,40,40,3,40,40,40,3,40,40,40,3,3,40,40,40,40,3,40,40,0,0,0,0,0,88,89,90,90,0,0,0,88,89,94,91,38,95,88,89,90,94,91,38,95,88,89,90,91,91,91,88,89,90,94,91,38,95,88,89,90,91,91,94,91,38,95,88,89,90,94,94,91,38,95,94,94,95,38,91,91,95,38,93,0,94,91,38,95,88,89,90,94,91,38,95,88,89,90,94,91,38,95,88,89,90,93,94,91,38,95,88,89,90,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,85,0,82,0,82,0,85,85,85,97,98,82,85,97,98,82,85,97,82,97,85,97,98,82,85,97,98,82,85,97,98,82,85,82,85,97,98,82,82,82,97,85,85,97,98,82,97,98,85,97,98,82,97,97,85,85,85,85,97,98,82,85,97,98,82,85,97,98,82,85,97,98,82,85,85,97,82,97,85,97,98,82,104,0,104,105,103,105,0,0,0,0,103,0,104,0,102,101,8,104,105,103,67,102,101,8,104,105,103,67,8,8,67,8,67,102,67,0,8,67,67,102,101,102,104,105,103,102,101,8,104,104,104,104,105,103,67,101,101,102,101,8,104,105,103,67,0,8,101,8,102,67,102,102,102,0,102,101,102,102,101,101,8,67,102,101,8,104,105,103,67,102,101,8,104,105,103,67,102,101,8,104,105,103,67,102,67,102,102,102,101,8,104,105,103,67,67,198,199,200,200,201,0,0,99,107,99,107,107,99,107,99,107,99,107,107,99,99,107,99,99,107,99,107,99,99,107,99,107,107,99,99,107,99,107,99,107,99,107,107,107,107,99,107,99,107,0,0,0,108,108,111,110,110,110,108,110,108,110,110,108,108,108,110,111,108,110,111,110,111,110,111,108,110,108,108,108,110,111,108,108,110,110,111,111,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,108,108,110,111,108,110,111,108,110,111,108,110,111,108,110,111,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,37,0,0,37,37,10,10,10,10,10,10,10,10,10,10,10,37,10,37,10,10,10,10,10,10,10,37,10,37,37,37,10,10,10,10,10,10,10,10,10,10,37,10,10,10,10,10,10,10,10,10,10,37,10,37,10,37,10,10,10,10,37,10,202,0,0,121,121,121,121,121,121,121,121,121,121,121,59,121,59,121,59,59,121,121,121,59,121,121,121,121,121,121,121,59,121,121,59,121,121,121,59,59,121,59,121,59,121,59,121,121,121,121,121,59,0,0,0,0,0,0,0,127,127,127,127,127,127,127,127,127,119,119,127,127,127,127,127,0,0,0,0,127,127,127,127,4,127,127,127,119,4,123,123,123,123,123,123,123,123,119,127,119,127,123,4,123,123,119,127,127,119,127,123,123,123,123,123,123,119,127,123,123,123,123,4,127,119,127,119,127,119,127,123,123,123,123,119,127,4,203,204,205,203,205,206,207,208,209,210,211,212,213,214,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,118,118,120,118,120,126,118,118,118,118,118,120,118,120,118,120,126,118,118,126,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,120,118,120,118,120,118,120,216,216,0,0,0,0,0,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,156,0,0,0,0,0,0,46,46,217,128,46,46,11,217,128,128,128,128,128,46,46,128,46,128,128,11,46,128,156,131,133,46,218,46,46,46,133,46,128,135,131,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,26,45,136,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,27,56,114,6,45,117,27,56,112,113,114,137,136,139,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,26,117,6,45,117,27,56,112,113,114,137,136,139,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,45,45,27,27,137,26,26,6,45,117,27,56,112,113,114,137,136,139,26,100,15,139,139,27,112,114,137,26,26,6,45,113,137,136,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,117,112,139,112,139,6,45,117,27,56,112,113,114,137,136,139,26,100,15,45,136,26,117,6,45,117,27,56,112,113,114,137,136,139,26,100,15,139,45,26,26,15,45,6,45,117,27,56,112,113,114,137,136,139,26,100,15,45,27,26,6,45,117,27,56,112,113,114,137,136,139,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,6,45,117,27,56,112,113,114,137,136,139,26,100,15,117,112,139,6,45,117,27,56,112,113,114,137,136,139,26,100,15,0,0,146,0,0,0,147,146,148,148,143,146,146,148,148,148,148,147,149,147,149,146,148,148,147,149,148,148,148,148,146,143,146,148,0,0,0,0,0,150,150,150,150,150,150,150,109,87,154,150,150,154,150,150,150,150,109,87,154,150,150,150,150,150,87,150,150,150,150,156,122,158,122,158,122,158,156,0,0,0,0,0,0,0,0,79,131,11,131,11,156,131,11,122,79,157,70,158,156,131,11,122,79,157,70,158,156,131,11,79,157,70,158,156,131,11,79,157,70,158,70,70,11,79,122,131,11,79,157,158,158,131,156,131,11,79,156,131,11,156,156,156,156,131,11,156,156,156,156,131,131,131,11,11,11,11,122,79,157,70,158,156,131,11,156,131,156,156,131,11,156,131,11,122,79,79,157,70,158,79,122,11,79,79,70,11,79,79,79,157,70,70,79,79,156,79,156,156,131,157,158,156,156,131,11,131,11,156,131,11,79,157,70,158,131,131,156,156,79,156,156,131,131,11,11,122,122,79,79,157,70,158,156,131,11,122,79,157,70,158,131,131,156,131,11,122,79,157,70,158,70,70,70,70,79,79,157,79,131,131,11,131,11,131,131,131,156,131,11,122,79,157,70,158],"f":"````````````````{ce{}{}}0`{{{b{ceg}}}dfh{{j{e}}}}{cc{}}`2{{lnA`Ab{Ad{c}}eg{Al{{Aj{AfAh}}}}An{Al{{Aj{AfB`}}}}{Al{d}}{Bf{{Bd{Bb}}}}}{{b{gce}}}h{{j{c}}}f}```{{{b{ceg}}}{{Bh{d}}}fh{{j{e}}}}{c{{Bj{e}}}{}{}}0{cBl{}}6````````{{{Bn{c}}}{{C`{c}}}h}{{{Cb{c}}}{{C`{c}}}h}``88888888{{{Bn{c}}}Cdh}```77779999{{Cd{Bf{Cf}}{C`{c}}}{{Bn{c}}}h}{{Ch{C`{c}}}{{Cb{c}}}h}{{{Bn{c}}}{{Bf{Cf}}}h}`{{j{Bn{c}}}Cjh}{{{Cb{c}}}Chh}`999999998888{{j{Cb{c}}}Clh}0`????````````````{{CnAf}D`}`{{CnAfDb}d}```{ce{}{}}0000000```{{DdDf}Dh}{cc{}}00{DjDd}1`{{}Cn}4444{{Af{Ad{c}}}{{Bj{D`Dd}}}h}`{{AbDl{Dn{c}}{E`{c}}{Bf{{Bd{Bb}}}}}{{Eb{c}}}f}{{{Eb{c}}EdAf{Ad{e}}}{{Bj{dDd}}}fh}{{{Eb{c}}EfAf{Ad{e}}g}{{Bj{dDd}}}fh{{j{e}}}}{{{Eb{c}}EhAf{Ad{e}}g}{{Bj{dDd}}}fh{{j{e}}}}{{Cn{Bf{Ej}}}{{Bf{Af}}}}`{{CnAfEj}d}{Cnd}```{{{Eb{c}}{Ad{e}}g}{{Bj{dDd}}}fh{{j{e}}}}{{{Eb{c}}Af{Ad{e}}g}{{Bj{dDd}}}fh{{j{e}}}}1{c{{Bj{e}}}{}{}}0000000{cBl{}}000`{ce{}{}}000``````````{{EllEj}Eh}{EnEh}{{lEjF`}Fb}{{{Fd{Ch}}En}Fb}`444444444444{Ehl}``{FbFb}{FfFf}{B`B`}{EhEh}{EdEd}{EfEf}{{ce}d{}{}}00000{c{{Bj{FbFh}}}Fj}{c{{Bj{FfFh}}}Fj}{c{{Bj{B`Fh}}}Fj}{c{{Bj{EhFh}}}Fj}{c{{Bj{EdFh}}}Fj}{c{{Bj{EfFh}}}Fj}{{cFl}{{Bj{FbFh}}}Fj}{{cFl}{{Bj{EhFh}}}Fj}{cc{}}00000```{ce{}{}}00000`{Ed{{Fd{Fl}}}}{{Fbc}{{Bj{dFh}}}Fn}{{Ffc}{{Bj{dFh}}}Fn}{{B`c}{{Bj{dFh}}}Fn}{{Ehc}{{Bj{dFh}}}Fn}{{Edc}{{Bj{dFh}}}Fn}{{Efc}{{Bj{dFh}}}Fn}`{EdG`}{EhGb}`999999{c{{Bj{e}}}{}{}}00000000000{cBl{}}00000;;;;;;````;;;;```<<;;``{{Gd{Gf{c}}{Al{{Aj{AfFf}}}}e{Al{d}}{Bf{{Bd{Bb}}}}}{{Gh{ec}}}hf}````{{{Gh{ce}}}{{Bh{d}}}fh}333322==````====````{{GjBb}d}??`>>{{{Gl{c}}}D`Gn}{GjD`}`{{D`{Bf{{Hb{H`}}}}}{{Gl{c}}}Gn}{{D`{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}{Bf{{Hb{H`}}}}}Gj}`````````````{{Gj{Al{Bb}}{Al{d}}}{{Bh{d}}}}```999988``````{ce{}{}}0``````````````````````````````````````````````````````````````00000000000000000000000000000000000000000000000000000000`{cc{}}000000000000000000000000000{{}{{Hb{H`}}}}00000000000000000000000000```2222222222222222222222222222````````````````````{{Bb{Bf{{Bd{Bb}}}}}d}```````````````````````````````========================================================<<<<<<<<<<<<<<<<<<<<<<<<<<<<````3333333333333333333333333333`````````````33333333`{nn}{{ce}d{}{}}`{{{Hd{c}}Hf{Ad{e}}g}{{Bj{dHh}}}fh{{j{e}}}}`{{HhDf}Dh}666{DjHh}7{{HjAf}D`}{HjD`}::::{{{Hd{c}}Hf}D`f}`{{nHf{Dn{c}}{E`{c}}Hl{Bf{{Bd{Bb}}}}}{{Hd{c}}}f}{{{Hd{c}}HnAf{Ad{e}}g}{{Bj{dHh}}}fh{{j{e}}}}{{{Hd{c}}I`Af{Ad{e}}}{{Bj{dHh}}}fh}{{{Hd{c}}IbAf{Ad{e}}}{{Bj{dHh}}}fh}{{{Hd{c}}IdAf{Ad{e}}}{{Bj{dHh}}}fh}{{{Hd{c}}IfAf{Ad{e}}g}{{Bj{dHh}}}fh{{j{e}}}}```{ce{}{}}{c{{Bj{e}}}{}{}}0000000{cBl{}}000``2222````````````2222222222{Hnl}{Idl}````{HnHn}{IfIf}{IbIb}{IdId}{I`I`}{{ce}d{}{}}0000{c{{Bj{HnFh}}}Fj}{c{{Bj{IfFh}}}Fj}{c{{Bj{IbFh}}}Fj}{c{{Bj{IdFh}}}Fj}{c{{Bj{I`Fh}}}Fj}{{cFl}{{Bj{HnFh}}}Fj}{cc{}}{I`Hn}{IfHn}{IdHn}{IbHn}4444`{ce{}{}}{HnAh}1111`{Id{{Fd{Fl}}}}{{lCdEn}Ib}{{EllCdCfIh}Id}`{{Hnc}{{Bj{dFh}}}Fn}{{Ifc}{{Bj{dFh}}}Fn}{{Ibc}{{Bj{dFh}}}Fn}{{Idc}{{Bj{dFh}}}Fn}{{I`c}{{Bj{dFh}}}Fn}`{IdG`}{HnGb}0;;;;;{c{{Bj{e}}}{}{}}000000000{cBl{}}0000{HnCd}0{IdCd}````?????{{AfHlEn}D`}{{AfCdHl}D`}{{AfHl}D`}{{I`Hl}{{Aj{Af{Bf{Af}}}}}}{{IdHl}Af}`````````{ce{}{}}00000{Ijl}``{EnEn}{IhIh}{IjIj}{{ce}d{}{}}00{{IjAfId}{{Bf{En}}}}{c{{Bj{EnFh}}}Fj}{c{{Bj{IhFh}}}Fj}{{cFl}{{Bj{IhFh}}}Fj}{{EnEn}D`}{{IhIh}D`}{{ce}D`{}{}}0{{IhDf}Dh}{cc{}}00{{}En}{{Ihc}dIl}{ce{}{}}00{EnD`}{IhD`}{{En{Ad{c}}}{{Bj{D`Dj}}}h}{{EnIn}D`}223322{{lCdIn}Ij}`{{Enc}{{Bj{dFh}}}Fn}{{Ihc}{{Bj{dFh}}}Fn}``777{c{{Bj{e}}}{}{}}00000{cBl{}}00{IjIn}`{IjCd}``;;;````````````````````````````{{{J`{Fl}}}Jb}{{}{{Hb{H`}}}}{JdJb}{JfGb}```````````????{Ahl}{JhJh}{AhAh}{{ce}d{}{}}0{c{{Bj{JhFh}}}Fj}{c{{Bj{AhFh}}}Fj}{{cFl}{{Bj{JhFh}}}Fj}{{cFl}{{Bj{AhFh}}}Fj}{FfJh}{EhJh}{HnJh}{JjJh}{B`Jh}{cc{}}0{ce{}{}}0{AhD`}{{Jhc}{{Bj{dFh}}}Fn}{{Ahc}{{Bj{dFh}}}Fn}{AhGb}44{c{{Bj{e}}}{}{}}000{cBl{}}0{Ah{{Bf{Cd}}}}77``77{{fJh}d}{{{E`{c}}}{{E`{c}}}{Jlf}}{{ce}d{}{}};{{fIn}d};`{c{{E`{c}}}f}{f{{Bf{{Aj{AfJh}}}}}}{{fAfJh}d}>998{{fJn}d}{{{E`{c}}Jn}df}{ce{}{}}``````````````00000000000000```{{K`Df}Dh}{{KbDf}Dh}{{KdDf}Dh}{cc{}}000000{{KfCd}{{Bf{{Aj{AfAh}}}}}}{{KfcAf}D`{{Kh{Ah}}Kj}}6666666`{{{Al{{Aj{AfAh}}}}An}Kl}{AnKf}{{{Al{{Aj{AfB`}}}}}Dl}{{{Al{{Aj{AfFf}}}}}Kn}`{{KllCdL`}{{Bj{{Aj{AfAh}}K`}}}}{Kn{{Bj{{Aj{AfFf}}Kd}}}}{{DlAfL`}{{Bj{B`Kb}}}}{{KfCd}d}{{KfGb}d}``{KjGb}{{c{Al{d}}}{{Aj{{Bh{d}}{Al{{Aj{AfAh}}}}{Al{{Aj{AfFf}}}}{Al{{Aj{AfB`}}}}}}}f}{c{{Bj{e}}}{}{}}0000000000000{cBl{}}000000{KjCd}{ce{}{}}000000`00{{{Dn{c}}e}df{{Kh{Jh}}}}{{{Dn{c}}}{{Dn{c}}}{Jlf}}{{ce}d{}{}}{cc{}}4`{c{{Dn{c}}}f}{{{Dn{c}}Afe}df{{Kh{Jh}}}}69986```````````{JdJj}77777777{Jjl}{Lbl}{Jdl}`{JjJj}{LbLb}{LdLd}{JdJd};;;;{c{{Bj{JjFh}}}Fj}{c{{Bj{LbFh}}}Fj}{c{{Bj{LdFh}}}Fj}{c{{Bj{JdFh}}}Fj}{{cFl}{{Bj{JjFh}}}Fj}{{cFl}{{Bj{JdFh}}}Fj}{cc{}}00{EnJd}1{LfJd}`{JjAh}{ce{}{}}000{Lb{{Fd{Fl}}}}`{{Jjc}{{Bj{dFh}}}Fn}{{Lbc}{{Bj{dFh}}}Fn}{{Ldc}{{Bj{dFh}}}Fn}{{Jdc}{{Bj{dFh}}}Fn}`{LbG`}{JjGb}0{{EllCd{Bf{Lf}}}Jj}8888{c{{Bj{e}}}{}{}}0000000{cBl{}}000{JjCd}0{LbCd}{JdCd}`====``````````````==============`{A`A`}{HfHf}{{ce}d{}{}}0``{{CdLh}Gb}`{{HfHf}D`}{{ce}D`{}{}}`{{LjCdA`}d}{{{Ll{c}}}{{Bj{dLn}}}f}{{M`Df}Dh}{{MbDf}Dh}{{LnDf}Dh}{cc{}}00{DjM`}{LnM`}{MbM`}3333{{CdA`}{{Md{CdL`}}}}{{A`CdHl}Lj}{ce{}{}}000000{{CdLh}D`}```{{A`{Dn{c}}CdHl{Bf{{Bd{Bb}}}}}{{Bj{{Ll{c}}M`}}}f}{{CdL`}Hf}{{{Ll{c}}LdAf{Ad{e}}}{{Bj{dM`}}}fh}{{{Ll{c}}JjAf{Ad{e}}}{{Bj{dM`}}}fh}{{{Ll{c}}LbAf{Ad{e}}}{{Bj{dM`}}}fh}{{CdIn}Af}`{{LjCdA`}d}`{{{Ll{c}}{Ad{e}}}{{Bj{dM`}}}fh}``99{c{{Bj{e}}}{}{}}0000000000000{cBl{}}000000{{{Ll{c}}CdHl}{{Bj{dM`}}}f}`{{{Ll{c}}}Hff}`======={{HfL`}Hf}```````>>>>{Mfl}``{LfLf}{MfMf}{{ce}d{}{}}0{{MfAfLb}{{Bf{Lf}}}}{c{{Bj{LfFh}}}Fj}{{LfLf}D`}{{MfMf}D`}{{ce}D`{}{}}{cc{}}0{ce{}{}}0{{Lf{Ad{c}}}{{Bj{D`Dj}}}h}{{LfIn}D`}{{lCdIn}Mf}{{Lfc}{{Bj{dFh}}}Fn}```44{c{{Bj{e}}}{}{}}000{cBl{}}0{MfIn}`{MfCd}``88``````````````{{{Mh{c}}}{{Gf{c}}}h}`999999{{}{{`{{Aj{dddddddddddd}}}}}}{{}{{`{ceg{Aj{ddddddddddddddddddddddddddddddd}}}}}h{{j{c}}}f}``{{{Mh{c}}}dh}```==={{cMjHl}dh}={Ml{{Aj{nA`AbGd}}}}>>```````````````````````````````````{{{Mn{ceg}}}{{Mh{c}}}h{{j{c}}}f}::::::999???````````{{{C`{c}}{J`{Fl}}}{{Bf{{Fd{Fl}}}}}h}{{{C`{c}}Cf}{{Bj{{Bf{Ch}}Dj}}}h}{{{C`{c}}Ej}{{Bj{{Bf{Cf}}Dj}}}h}{{{C`{c}}Cf}{{Bj{{Bf{N`}}Dj}}}h}{{{C`{c}}Cf}{{Bj{{Bf{Cf}}Dj}}}h}{{{C`{c}}Cf}{{Bj{{Bf{Nb}}Dj}}}h}{{{C`{c}}CfF`}{{Bf{Nd}}}h}{{{C`{c}}Cf}{{Bj{{Bf{Ej}}Dj}}}h}{{{C`{c}}Cf}{{Bj{EnDj}}}h}`{ce{}{}}0{cc{}}1`{c{{Bj{e}}}{}{}}0{cBl{}}{{{C`{c}}}{{Bj{InDj}}}h}4`````{{{Ad{c}}{Bf{Cf}}}{{Bj{{C`{c}}Dj}}}h}{{{Ad{c}}Cf}{{Bj{{Bf{Ch}}Dj}}}h}{{{Ad{c}}Ej}{{Bj{{Bf{Cf}}Dj}}}h}{{{Ad{c}}Cf}{{Bj{{Bf{N`}}Dj}}}h}{{{Ad{c}}Cf}{{Bj{{Bf{Cf}}Dj}}}h}{{{Ad{c}}Cf}{{Bj{{Bf{Nb}}Dj}}}h}{{{Ad{c}}CfF`}{{Bf{Nd}}}h}{{{Ad{c}}Cf}{{Bj{{Bf{Ej}}Dj}}}h}{{{Ad{c}}Cf}{{Bj{EnDj}}}h}{{{Ad{c}}Cf}{{`{{Nh{}{{Nf{Cf}}}}}}}h}>>>>{{{Ad{c}}Cf}{{Bj{NjDj}}}h}{{{Ad{c}}NlCf}{{Bj{{Fd{{Aj{Cf{Bf{Jn}}}}}}Dj}}}h}{{{Ad{c}}{J`{Fl}}}{{Bf{{Fd{Fl}}}}}h}{{{Ad{c}}}{{Bj{InDj}}}h}{{{Ad{c}}Cf}D`h}{{{Ad{c}}NlCf}dh}{{{Ad{c}}NlCf}{{Bj{dDj}}}h}{{DjDf}Dh}{cc{}}0{NnDj}{O`Dj}{{{Ad{c}}}{{Bj{{Bf{Cf}}Dj}}}h}{{{Ad{c}}}{{Bj{{Bf{Ej}}Dj}}}h}{{{Ad{c}}}{{Bj{EnDj}}}h}{{{Ad{c}}}{{Bj{{Bf{Lf}}Dj}}}h}{{{Ad{c}}}{{Bj{CdDj}}}h}{{{Ad{c}}}{{Bj{{Bf{Cd}}Dj}}}h}1{{{Ad{c}}MjHl}{{Bj{dDj}}}h}{{{Ad{c}}Ch{Bf{Mj}}{Bf{Jn}}}{{Bj{dDj}}}h}{ce{}{}}06{c{{Ad{c}}}h}0{{{Ad{c}}Cf}{{Bj{{Bf{Mj}}Dj}}}h}{{{Bf{{Bd{Bb}}}}{Bf{En}}{Bf{En}}{Fd{{Aj{Cf{Bf{Jn}}}}}}}d}{{{Ad{c}}Lf}{{Bj{dDj}}}h}{{{Ad{c}}Cd}{{Bj{dDj}}}h}0{{{Ad{c}}}Obh}{c{{Bj{e}}}{}{}}000{cBl{}}0{{{Ad{c}}En{Bf{{Bd{Bb}}}}}{{Bj{{Bf{Jn}}Dj}}}h}{{{Ad{c}}}{{Bj{HlDj}}}h}{{{Ad{c}}Cf}{{Bj{OdDj}}}h};;{{{Ad{c}}Nl}dh}```{{{Ob{c}}Cf}{{Bj{{Bf{Ch}}Dj}}}Of}{{{Ob{c}}Ej}{{Bj{{Bf{Cf}}Dj}}}Of}{{{Ob{c}}Cf}{{Bj{{Bf{N`}}Dj}}}Of}{{{Ob{c}}Cf}{{Bj{{Bf{Cf}}Dj}}}Of}{{{Ob{c}}Cf}{{Bj{{Bf{Nb}}Dj}}}Of}{{{Ob{c}}CfF`}{{Bf{Nd}}}Of}{{{Ob{c}}Cf}{{Bj{{Bf{Ej}}Dj}}}Of}{{{Ob{c}}Cf}{{Bj{EnDj}}}Of}{{{Ob{c}}EjF`}{{Bj{{Fd{Ch}}Dj}}}Of}{{{Ob{c}}}{{Bj{{Fd{Ch}}Dj}}}Of}{ce{}{}}000{{{Ob{c}}Cf}{{Bj{NjDj}}}Of}{{{Gf{c}}}{{Gf{c}}}{Jlh}}{{ce}d{}{}}{{{Ob{c}}{J`{Fl}}}{{Bf{{Fd{Fl}}}}}Of}{{{Ob{c}}}{{Bj{InDj}}}Of}{cc{}}0{{{Ob{c}}}{{Bj{{Bf{Cf}}Dj}}}Of}{{{Ob{c}}}{{Bj{{Bf{Ej}}Dj}}}Of}{{{Ob{c}}}{{Bj{EnDj}}}Of}{{{Ob{c}}}{{Bj{{Bf{Lf}}Dj}}}Of}{{{Ob{c}}}{{Bj{CdDj}}}Of}{{{Ob{c}}}{{Bj{{Bf{Cd}}Dj}}}Of}<<3{c{{Ob{c}}}Of}{c{{Gf{c}}}h}7{{{Ob{c}}Cf}{{Bj{{Bf{Mj}}Dj}}}Of}:{{{Gf{c}}}Obh}{ce{}{}}{c{{Bj{e}}}{}{}}000{cBl{}}0{{{Ob{c}}}{{Bj{HlDj}}}Of}<{{{Ob{c}}}{{Bj{D`Dj}}}Of}{{{Ob{c}}Cf}{{Bj{OdDj}}}Of}55{{En{Ad{c}}}{{Bj{{Bf{Cf}}Dj}}}h}{{En{Ad{c}}}{{Bj{D`Dj}}}h}{{En{Ad{c}}}{{Bj{{Bf{En}}Dj}}}h}{{Cd{Ad{c}}}{{Bj{{Bf{Cf}}Dj}}}h}{{Ch{Ad{c}}l}{{Bj{D`Dj}}}h}{{IbCd{Ad{c}}l}{{Bj{D`Dj}}}h}{{En{Ad{c}}l}{{Bj{D`Dj}}}h}``````````````````````````````{{OfCf}{{Bj{{Bf{Ch}}Nn}}}}{{OfEj}{{Bj{{Bf{Cf}}Nn}}}}{{OfCf}{{Bj{{Bf{N`}}Nn}}}}{{OfCf}{{Bj{{Bf{Cf}}Nn}}}}{{OfCf}{{Bj{{Bf{Nb}}Nn}}}}{{OfCfF`}{{Bf{Nd}}}}{{OfCf}{{Bj{{Bf{Ej}}Nn}}}}{{OfCf}{{Bj{EnNn}}}}{ce{}{}}000{{OfCf}{{Bj{NjNn}}}}{{{h{}{{Oh{c}}{Oj{e}}}}}dOlOf}{{Of{J`{Fl}}}{{Bf{{Fd{Fl}}}}}}{Of{{Bj{InNn}}}}{{NnDf}Dh}{{OnDf}Dh}0{cc{}}04{Of{{Bj{{Bf{Cf}}Nn}}}}{Of{{Bj{EnNn}}}}{Of{{Bj{{Bf{Lf}}Nn}}}}{Of{{Bj{CdNn}}}}{Of{{Bj{{Bf{Cd}}Nn}}}}<<34{{OfCf}{{Bj{{Bf{Mj}}Nn}}}}9{{{h{}{{Oh{c}}{Oj{e}}}}}eOlOf}{cJb{}}{c{{Bj{e}}}{}{}}000{cBl{}}0{Of{{Bj{HlNn}}}}{Of{{Bj{{Bf{Ej}}Nn}}}}{Of{{Bj{D`Nn}}}}{{OfCf}{{Bj{OdNn}}}}{ce{}{}}0{{{h{}{{Oh{c}}{Oj{e}}}}c}dOlOf}`````````````````````````````````````{{{J`{Fl}}{J`{Fl}}}{{Fd{Fl}}}}````{{{Nl{c}}Mj}dOl}3333{{Ol{J`{Fl}}}d}{{{Nl{c}}CfNb}dOl}{{{Nl{c}}Cf}dOl}0{{{Nl{c}}{J`{Fl}}}dOl}1{{O`Df}Dh}{cc{}}099{{}Ol}{{}{{Nl{c}}}Ol}0{{Ol{J`{Fl}}{J`{Fl}}}d}{{{Nl{c}}Ch}{{Bj{dDj}}}Ol}{{{Nl{c}}EjCf}{{Bj{dDj}}}Ol}{{{Nl{c}}CfNj}{{Bj{dDj}}}Ol}{{{Nl{c}}{J`{Fl}}{J`{Fl}}}dOl}{{{Nl{c}}In}{{Bj{dDj}}}Ol}{{{Nl{c}}Cf}{{Bj{dDj}}}Ol}0{{{Nl{c}}En}{{Bj{dDj}}}Ol}{{{Nl{c}}Lf}{{Bj{dDj}}}Ol}{{{Nl{c}}Cd}{{Bj{dDj}}}Ol}023{{{Nl{c}}CfMj}{{Bj{dO`}}}Ol}{{{Nl{c}}CfJn}{{Bj{dDj}}}Ol}6{{{Nl{c}}Ej}{{Bj{dDj}}}Ol}{{{Nl{c}}D`}{{Bj{dDj}}}Ol}{c{{Bj{e}}}{}{}}000{cBl{}}0{ce{}{}}0`````````00{ChCh}{{ce}d{}{}}``{c{{Bj{ChFh}}}Fj}{cc{}}{{EjEnCf}Cf}``5{{Ch{Ad{c}}}{{Bj{D`Dj}}}h}`{{EjEnCfN`}Ch}{{Chc}{{Bj{dFh}}}Fn}8::98``````````88`{{A`c}A`{{Ab{{J`{Fl}}}}}}{ElEl}8``{c{{Ad{Fle}}}{{Ab{{J`{Fl}}}}}{}}{A`{{Ad{Flc}}}{}}{{A`{Ad{Flc}}}d{}}019={{}A`}{AfEl}{cA`{{Ab{{J`{Fl}}}}}}{{}Ah}`{ElAf}{A`d}``{{Aj{J`{Fl}}}c{}}{{El{Fd{Fl}}}G`}`{ce{}{}}{c{{Bj{e}}}{}{}}0{{Aj{J`{Fl}}}{{Bj{cAl}}}{}}{cBl{}}{{A`c}d{{Ab{{J`{Fl}}}}}}{{An{J`{Fl}}c}{{Bj{dAl}}}{}}`5``````````````{{EjGb}c{}}{{CdGb}c{}}{{EjGb}d}{{AA`AAb}d}{{AnGb}d}::::::::::::::::::::::::::::{Cf{{AAd{Fl}}}}{G`{{AAd{Fl}}}}{Nd{{Fd{Fl}}}}{ll}{EjEj}{NjNj}{CfCf}{G`G`}{N`N`}{NbNb}{NdNd}{AAbAAb}{AA`AA`}{AAfAAf}{CdCd}{LhLh}{AnAn}{{ce}d{}{}}0000000000000{{CdCd}AAh}{{}Nj}{c{{Bj{lFh}}}Fj}{c{{Bj{EjFh}}}Fj}{c{{Bj{NjFh}}}Fj}{c{{Bj{CfFh}}}Fj}{c{{Bj{G`Fh}}}Fj}{c{{Bj{N`Fh}}}Fj}{c{{Bj{NbFh}}}Fj}{c{{Bj{NdFh}}}Fj}{c{{Bj{AAbFh}}}Fj}{c{{Bj{AA`Fh}}}Fj}{c{{Bj{AAfFh}}}Fj}{c{{Bj{CdFh}}}Fj}{c{{Bj{LhFh}}}Fj}{c{{Bj{AnFh}}}Fj}{{ll}D`}{{EjEj}D`}{{NjNj}D`}{{CfCf}D`}{{G`G`}D`}{{N`N`}D`}{{NbNb}D`}{{NdNd}D`}{{AAbAAb}D`}{{AA`AA`}D`}{{AAfAAf}D`}{{CdCd}D`}{{LhLh}D`}{{AnAn}D`}{{ce}D`{}{}}0000000000000{{EjDf}Dh}0{{CfDf}Dh}0{{AAbDf}Dh}{{CdDf}Dh}0{cc{}}0000000000000{{}AAf}{{AAfAh}{{Bf{G`}}}}{{Cfc}dIl}{{N`c}dIl}{{Ndc}dIl}{{AAbc}dIl}{{Cdc}dIl}{{}Cd}{lGb}{EjGb}{NbF`}{AAbGb}{AA`AAj}{CdGb}{LhF`}{AnGb}{ce{}{}}0000000000000{Nj{{AAl{Cf}}}}{N`{{AAl{Nd}}}}{AAf{{AAl{{Bf{G`}}}}}}{N`Nb}{AAfAh}{Gbl}{GbEj}{{{Fd{Cf}}}Nj}{{{AAd{Fl}}}Cf}{{{AAd{Fl}}}G`}{{{Fd{Nd}}}N`}{F`Nb}{{{Fd{Fl}}}Nd}{GbAAb}{AAjAA`}{AhAAf}{GbCd}{F`Lh}{GbAn}{{EjEj}{{Bf{AAh}}}}{{AA`AA`}{{Bf{AAh}}}}{{CdCd}{{Bf{AAh}}}}{{NjCf}d}{{lc}{{Bj{dFh}}}Fn}{{Ejc}{{Bj{dFh}}}Fn}{{Njc}{{Bj{dFh}}}Fn}{{Cfc}{{Bj{dFh}}}Fn}{{G`c}{{Bj{dFh}}}Fn}{{N`c}{{Bj{dFh}}}Fn}{{Nbc}{{Bj{dFh}}}Fn}{{Ndc}{{Bj{dFh}}}Fn}{{AAbc}{{Bj{dFh}}}Fn}{{AA`c}{{Bj{dFh}}}Fn}{{AAfc}{{Bj{dFh}}}Fn}{{Cdc}{{Bj{dFh}}}Fn}{{Lhc}{{Bj{dFh}}}Fn}{{Anc}{{Bj{dFh}}}Fn}{{AAfAh{Bf{G`}}}d}{{EjEj}c{}}{{CdCd}c{}}{{CdGb}c{}}{{AnGb}d}{Ej{{AAd{Fl}}}}{ce{}{}}0000000000000{cJb{}}00{c{{Bj{e}}}{}{}}000000000000000000000000000{cBl{}}0000000000000{Nj{{Fd{Cf}}}}{N`{{Fd{Nd}}}}{AAf{{Fd{{Bf{G`}}}}}}66666666666666````````66{AAnl}{{{ABd{}{{AB`{c}}{ABb{e}}}}}lAAn{{ABf{}{{AB`{c}}}}}}{{{ABd{}{{AB`{c}}{ABb{e}}}}Afc}{{Bf{e}}}AAn{{ABf{}{{AB`{c}}}}}}{{{ABh{c}}Af}BfABd}`{cc{}};{{{ABf{}{{AB`{c}}}}{Ad{e}}}{{Bj{D`Dj}}}AAnh}{{ABjAf}D`}{{{ABf{}{{AB`{c}}}}In}D`AAn}{ABj{{Fd{Fl}}}}{{lCdIn}{{ABd{}{{AB`{c}}{ABb{e}}}}}AAn{{ABf{}{{AB`{c}}}}}}{{lCdHl}{{ABh{c}}}ABd}`{AA`AA`}{ABjG`}{c{{Bj{e}}}{}{}}0{cBl{}}{{{ABh{c}}Hl}D`ABd}{{{ABd{}{{AB`{c}}{ABb{e}}}}}InAAn{{ABf{}{{AB`{c}}}}}}{AAnCd}{{{ABd{}{{AB`{c}}{ABb{e}}}}}CdAAn{{ABf{}{{AB`{c}}}}}}{ce{}{}}`````00{{{ABl{ce}}}{{ABl{ce}}}{JlABnAC`}{JlABnAC`}}{{ce}d{}{}}{{{ABl{ce}}c}D`{ABnAC`}{ABnAC`}}{{{ABl{ce}}c}d{ABnAC`}{ABnAC`}}{{{ABl{ce}}}{{ACb{c}}}{ABnAC`}{ABnAC`}}````{c{{Bj{{ABl{eg}}Fh}}}Fj{ABnAC`}{ABnAC`}}{JnACd}{cc{}}{{{ABl{ce}}c}{{Bf{e}}}{ABnAC`}{ABnAC`}}{{{ABl{ce}}ce}d{ABnAC`}{ABnAC`}}{{{ABl{ce}}}{{ACf{ce}}}{ABnAC`}{ABnAC`}}````;{{}{{ABl{ce}}}{ABnAC`}{ABnAC`}}{{{ABl{ce}}g}{{Bj{dFh}}}{ABnAC`}{ABnAC`}Fn}={ACd{{Bj{Jnc}}}{}}{c{{Bj{e}}}{}{}}0{cBl{}}{ce{}{}}````````````````{{InJn}d}{Af{{AAd{Fl}}}}{Af{{AAd{Fl}}}}{AfAf}{Af{{J`{Fl}}}}5555555555555555{AChACh}{AfAf}{AfAf}{InIn}{ACjACj}{HlHl}{AClACl}{{ce}d{}{}}000000{HlIn}``{{InAf}D`}{OdD`}{{AfAf}ACn}{{}Af}{{}In}{c{{Bj{ACjFh}}}Fj}{c{{Bj{AClFh}}}Fj}{{cFl}{{Bj{AClFh}}}Fj}{Afd}{{AChACh}D`}{{AfAf}D`}{{AfAf}D`}{{InIn}D`}{{ce}D`{}{}}00{{AChDf}{{Bj{dAD`}}}}000{{AfDf}{{Bj{dAD`}}}}{{AfDf}{{Bj{dAD`}}}}{ADbACh}{cc{}}{{{AAd{Fl}}}ACh}0{{{AAd{Fl}}}Af}20{ADdAf}3{AfAf}{ADfAf}5555543{{{AAd{Fl}}}{{Bj{AfAl}}}}{{{AAd{Fl}}{AAd{Fl}}}ACh}{{{AAd{Fl}}}{{Bj{AfAl}}}}{{{J`{Fl}}}{{Bj{AChAl}}}}{ADh{{Bj{AChAl}}}}{cAf{ADjADl}}{{Afc}dIl}{ce{}{}}0000{InACj}111{InD`}{OdD`}{AfD`}{InAh}{{}In}{{InIn{Bf{Ej}}D`}Hl}`{{InAf}{{Bf{Ah}}}}{{InAf}{{Bf{AAb}}}}``{HlIn}`{{InAfAAb}d}{InAA`}{ACh{{AAd{Fl}}}}{{InAf}{{Bf{{Aj{AfAAb}}}}}}`1`{{ACjc}{{Bj{dFh}}}Fn}{{AClc}{{Bj{dFh}}}Fn}33{Af{{AAd{Fl}}}}{Af{{AAd{Fl}}}}1{AfADn}{ce{}{}}000000{AfAE`}4{cJb{}}{ACh{{Fd{Fl}}}};{c{{Bj{e}}}{}{}}{{{J`{Fl}}}{{Bj{AChAl}}}}1{{{J`{Fl}}}{{Bj{AfAl}}}}{{{J`{Fl}}}{{Bj{Af}}}}33{ACl{{Bj{Odc}}}{}}4{ACj{{Bj{Inc}}}{}}55555555555{{Af{J`{Fl}}}{{Bj{AChAl}}}}{{c{J`{Fl}}}{{Bj{eAl}}}{}{}}{cBl{}}0000000{HlD`}`{Hl{{Bf{Ej}}}}`{In{{AAl{Af}}}}``{In{{Fd{{Aj{AfAAb}}}}}}{{Af{J`{Fl}}ACh}{{Bj{dAl}}}}0{{Af{J`{Fl}}ACh}{{Bj{dAl}}}}10{AfAf}{c{}{}}`{ce{}{}}0000000","c":[],"p":[[5,"Algorithm",12],[1,"unit"],[10,"Network",1066],[10,"KVStore",1683],[10,"App",32],[5,"ChainID",1925],[5,"HotStuffConfiguration",734],[5,"PacemakerConfiguration",1283],[5,"BlockSyncClientConfiguration",95],[5,"BlockTree",1561],[5,"VerifyingKey",2286],[6,"ProgressMessage",1022],[1,"tuple"],[5,"Receiver",2491],[5,"BufferSize",1925],[5,"BlockSyncResponse",164],[6,"Event",356],[5,"Sender",2491],[6,"Option",2492],[5,"JoinHandle",2493],[6,"Result",2494],[5,"TypeId",2495],[5,"ProduceBlockRequest",32],[5,"AppBlockTreeView",1540],[5,"ValidateBlockRequest",32],[5,"ViewNumber",1925],[5,"CryptoHash",1925],[5,"Block",1857],[5,"ProduceBlockResponse",32],[6,"ValidateBlockResponse",32],[5,"BlockSyncClientState",95],[1,"bool"],[5,"Duration",2496],[6,"BlockSyncClientError",95],[5,"Formatter",2497],[8,"Result",2497],[6,"BlockTreeError",1561],[5,"BlockSyncClientStub",1087],[5,"SenderHandle",1181],[5,"ValidatorSetUpdateHandle",1066],[5,"BlockSyncClient",95],[5,"AdvertiseBlock",164],[5,"AdvertisePC",164],[6,"BlockSyncAdvertiseMessage",164],[5,"BlockHeight",1925],[5,"Keypair",1879],[5,"PhaseCertificate",909],[1,"u32"],[6,"BlockSyncMessage",164],[5,"Vec",2498],[5,"BlockSyncRequest",164],[5,"Error",2499],[10,"Read",2500],[1,"u8"],[10,"Write",2500],[5,"SignatureBytes",1925],[1,"u64"],[5,"BlockSyncServerConfiguration",271],[5,"BlockTreeCamera",1625],[5,"BlockSyncServer",271],[5,"EventHandlers",302],[5,"HandlerPair",302],[10,"Logger",986],[10,"Fn",2501],[5,"Box",2502],[5,"HotStuff",734],[5,"ViewInfo",1283],[6,"HotStuffError",734],[6,"ProposalStatus",734],[5,"ValidatorSetState",2286],[6,"HotStuffMessage",799],[5,"NewView",799],[5,"Nudge",799],[5,"PhaseVote",799],[5,"Proposal",799],[6,"Phase",909],[5,"PhaseVoteCollector",909],[10,"Hasher",2503],[5,"ValidatorSet",2286],[1,"slice"],[5,"String",2504],[6,"ProgressCertificate",1200],[5,"SystemTime",2505],[6,"Message",1022],[6,"PacemakerMessage",1200],[10,"Clone",2506],[8,"ValidatorSetUpdates",2251],[6,"ProgressMessageReceiveError",1087],[6,"BlockSyncResponseReceiveError",1087],[6,"BlockSyncRequestReceiveError",1087],[5,"ProgressMessageBuffer",1087],[10,"Into",2507],[10,"Cacheable",1087],[5,"ProgressMessageStub",1087],[5,"BlockSyncServerStub",1087],[5,"Instant",2505],[5,"TimeoutVote",1200],[5,"AdvanceView",1200],[5,"TimeoutCertificate",1403],[5,"EpochLength",1925],[5,"PacemakerState",1283],[5,"Pacemaker",1283],[6,"ExtendViewError",1283],[6,"PacemakerError",1283],[6,"UpdateViewError",1283],[5,"BTreeMap",2508],[5,"TimeoutVoteCollector",1403],[5,"Replica",1447],[8,"AppStateUpdates",2251],[5,"Configuration",1447],[5,"ReplicaSpec",1447],[5,"Data",1925],[5,"DataLen",1925],[5,"Datum",1925],[17,"Item"],[10,"Iterator",2509],[5,"ChildrenList",1925],[5,"BlockTreeWriteBatch",1799],[6,"KVGetError",1683],[6,"KVSetError",1799],[5,"BlockTreeSnapshot",1625],[6,"ValidatorSetUpdatesStatus",2286],[10,"KVGet",1683],[17,"WriteBatch"],[17,"Snapshot"],[10,"WriteBatch",1799],[6,"Key",1683],[10,"Digest",1879],[10,"AsRef",2507],[5,"GenericArray",2510],[5,"SigningKey",2286],[1,"usize"],[10,"Signer",1879],[5,"Error",2511],[10,"Verifier",1879],[5,"TotalPower",1925],[5,"Power",1925],[1,"array"],[5,"SignatureSet",1925],[6,"Ordering",2512],[1,"u128"],[5,"Iter",2513],[10,"Vote",2217],[17,"Vote"],[17,"Certificate"],[10,"Collector",2217],[10,"Certificate",2217],[5,"ActiveCollectorPair",2217],[10,"SignedMessage",2217],[5,"UpdateSet",2251],[10,"Eq",2512],[10,"Hash",2503],[5,"Iter",2514],[8,"ValidatorSetUpdatesBytes",2251],[5,"Iter",2515],[5,"Signature",2286],[5,"ValidatorSetBytes",2286],[6,"ValidatorSetUpdatesStatusBytes",2286],[5,"Choice",2516],[5,"Error",2497],[5,"InternalSignature",2517],[5,"EdwardsPoint",2518],[5,"ExpandedSecretKey",2519],[1,"str"],[10,"CryptoRngCore",2520],[10,"Sized",2521],[5,"MontgomeryPoint",2522],[5,"Scalar",2523],[15,"Valid",90],[5,"AdvanceViewEvent",356],[5,"ReceiveAdvanceViewEvent",356],[5,"InsertBlockEvent",356],[5,"CommitBlockEvent",356],[5,"PruneBlockEvent",356],[5,"SendSyncResponseEvent",356],[5,"EndSyncEvent",356],[5,"UpdateHighestPCEvent",356],[5,"UpdateLockedPCEvent",356],[5,"UpdateHighestTCEvent",356],[5,"UpdateValidatorSetEvent",356],[5,"ProposeEvent",356],[5,"NudgeEvent",356],[5,"PhaseVoteEvent",356],[5,"NewViewEvent",356],[5,"TimeoutVoteEvent",356],[5,"ReceiveProposalEvent",356],[5,"ReceiveNudgeEvent",356],[5,"ReceivePhaseVoteEvent",356],[5,"ReceiveNewViewEvent",356],[5,"ReceiveTimeoutVoteEvent",356],[5,"StartViewEvent",356],[5,"ViewTimeoutEvent",356],[5,"CollectPCEvent",356],[5,"CollectTCEvent",356],[5,"StartSyncEvent",356],[5,"ReceiveSyncRequestEvent",356],[15,"OneLeaderProposed",798],[15,"TriedToExtendNonEpochView",1398],[15,"GetViewTimeoutError",1398],[15,"NonIncreasingViewError",1400],[15,"GetViewTimeoutError",1400],[15,"BlockExpectedButNotFound",1624],[15,"DeserializeValueError",1761],[15,"ValueExpectedButNotFound",1761],[15,"Ed25519DalekError",1761],[15,"BlockHeight",1766],[15,"BlockJustify",1766],[15,"BlockDataHash",1766],[15,"BlockDataLength",1766],[15,"BlockData",1766],[15,"BlockChildren",1766],[15,"PendingAppStateUpdates",1766],[15,"ValidatorSetUpdatesStatus",1766],[15,"BlockAtHeight",1766],[15,"CommittedAppState",1766],[15,"SerializeValueError",1849],[8,"CryptoHasher",1879],[8,"SignatureError",1879]],"b":[[843,"impl-From%3CNewView%3E-for-HotStuffMessage"],[844,"impl-From%3CProposal%3E-for-HotStuffMessage"],[845,"impl-From%3CPhaseVote%3E-for-HotStuffMessage"],[846,"impl-From%3CNudge%3E-for-HotStuffMessage"],[870,"impl-HotStuffMessage"],[871,"impl-Cacheable-for-HotStuffMessage"],[892,"impl-HotStuffMessage"],[893,"impl-Cacheable-for-HotStuffMessage"],[1042,"impl-From%3CBlockSyncRequest%3E-for-Message"],[1043,"impl-From%3CBlockSyncAdvertiseMessage%3E-for-Message"],[1044,"impl-From%3CHotStuffMessage%3E-for-Message"],[1045,"impl-From%3CPacemakerMessage%3E-for-Message"],[1046,"impl-From%3CBlockSyncResponse%3E-for-Message"],[1238,"impl-From%3CPhaseCertificate%3E-for-ProgressCertificate"],[1240,"impl-From%3CTimeoutCertificate%3E-for-ProgressCertificate"],[1255,"impl-PacemakerMessage"],[1256,"impl-Cacheable-for-PacemakerMessage"],[1274,"impl-Cacheable-for-PacemakerMessage"],[1275,"impl-PacemakerMessage"],[1331,"impl-From%3CBlockTreeError%3E-for-PacemakerError"],[1332,"impl-From%3CExtendViewError%3E-for-PacemakerError"],[1333,"impl-From%3CUpdateViewError%3E-for-PacemakerError"],[1590,"impl-From%3CKVGetError%3E-for-BlockTreeError"],[1591,"impl-From%3CKVSetError%3E-for-BlockTreeError"],[1730,"impl-Display-for-Key"],[1731,"impl-Debug-for-Key"],[2047,"impl-Display-for-BlockHeight"],[2048,"impl-Debug-for-BlockHeight"],[2049,"impl-Display-for-CryptoHash"],[2050,"impl-Debug-for-CryptoHash"],[2052,"impl-Display-for-ViewNumber"],[2053,"impl-Debug-for-ViewNumber"],[2137,"impl-Sub-for-ViewNumber"],[2138,"impl-Sub%3Cu64%3E-for-ViewNumber"],[2356,"impl-Display-for-Signature"],[2357,"impl-Debug-for-Signature"],[2358,"impl-UpperHex-for-Signature"],[2359,"impl-LowerHex-for-Signature"],[2362,"impl-From%3CInternalSignature%3E-for-Signature"],[2364,"impl-From%3C%5Bu8;+ed25519::::SignatureBytes::%7Bconstant%230%7D%5D%3E-for-Signature"],[2365,"impl-From%3C%26%5Bu8;+ed25519::::SignatureBytes::%7Bconstant%230%7D%5D%3E-for-Signature"],[2366,"impl-From%3C%26%5Bu8;+ed25519_dalek::::signing::SecretKey::%7Bconstant%230%7D%5D%3E-for-SigningKey"],[2368,"impl-From%3C%5Bu8;+ed25519_dalek::::signing::SecretKey::%7Bconstant%230%7D%5D%3E-for-SigningKey"],[2369,"impl-From%3CEdwardsPoint%3E-for-VerifyingKey"],[2371,"impl-From%3C%26SigningKey%3E-for-VerifyingKey"],[2372,"impl-From%3C%26ExpandedSecretKey%3E-for-VerifyingKey"],[2418,"impl-SignatureEncoding-for-Signature"],[2419,"impl-Signature"],[2475,"impl-SigningKey"],[2476,"impl-Verifier%3CSignature%3E-for-SigningKey"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
